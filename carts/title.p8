pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
-- virtua racing title cart
-- @freds72
-- assets: sega

-- vector & tools
function lerp(a,b,t)
	return a*(1-t)+b*t
end

function smoothstep(t)
	t=mid(t,0,1)
	return t*t*(3-2*t)
end

function make_v(a,b)
	return {
		b[1]-a[1],
		b[2]-a[2],
		b[3]-a[3]}
end
function v_clone(v)
	return {v[1],v[2],v[3]}
end
function v_dot(a,b)
	return a[1]*b[1]+a[2]*b[2]+a[3]*b[3]
end
function v_scale(v,scale)
	v[1]*=scale
	v[2]*=scale
	v[3]*=scale
end
function v_add(v,dv,scale)
	scale=scale or 1
	v[1]+=scale*dv[1]
	v[2]+=scale*dv[2]
	v[3]+=scale*dv[3]
end
-- safe vector length
function v_len(v)
	local x,y,z=v[1],v[2],v[3]
	local d=max(max(abs(x),abs(y)),abs(z))
	if(d<0.001) return 0
	x/=d
	y/=d
	z/=d
	return d*(x*x+y*y+z*z)^0.5
end
function v_normz(v)
	local d=v_dot(v,v)
	if d>0.001 then
		d=d^.5
		v[1]/=d
		v[2]/=d
		v[3]/=d
	end
	return d
end
function v_cross(a,b)
	local ax,ay,az=a[1],a[2],a[3]
	local bx,by,bz=b[1],b[2],b[3]
	return {ay*bz-az*by,az*bx-ax*bz,ax*by-ay*bx}
end

function v_lerp(a,b,t)
	return {
		lerp(a[1],b[1],t),
		lerp(a[2],b[2],t),
		lerp(a[3],b[3],t)
	}
end
function v_cross(a,b)
	local ax,ay,az=a[1],a[2],a[3]
	local bx,by,bz=b[1],b[2],b[3]
	return {ay*bz-az*by,az*bx-ax*bz,ax*by-ay*bx}
end
-- x/z orthogonal vector
function v2_ortho(a,scale)
	return {-scale*a[1],0,scale*a[3]}
end

local v_up={0,1,0}

-- quaternion
function make_q(v,angle)
	angle/=2
	-- fix pico sin
	local s=-sin(angle)
	return {v[1]*s,
	        v[2]*s,
	        v[3]*s,
	        cos(angle)}
end
function q_clone(q)
	return {q[1],q[2],q[3],q[4]}
end

function q_x_q(a,b)
	local qax,qay,qaz,qaw=a[1],a[2],a[3],a[4]
	local qbx,qby,qbz,qbw=b[1],b[2],b[3],b[4]
        
	a[1]=qax*qbw+qaw*qbx+qay*qbz-qaz*qby
	a[2]=qay*qbw+qaw*qby+qaz*qbx-qax*qbz
	a[3]=qaz*qbw+qaw*qbz+qax*qby-qay*qbx
	a[4]=qaw*qbw-qax*qbx-qay*qby-qaz*qbz
end
function m_from_q(q)
	local x,y,z,w=q[1],q[2],q[3],q[4]
	local x2,y2,z2=x+x,y+y,z+z
	local xx,xy,xz=x*x2,x*y2,x*z2
	local yy,yz,zz=y*y2,y*z2,z*z2
	local wx,wy,wz=w*x2,w*y2,w*z2

	return {
		1-(yy+zz),xy+wz,xz-wy,0,
		xy-wz,1-(xx+zz),yz+wx,0,
		xz+wy,yz-wx,1-(xx+yy),0,
		0,0,0,1}
end

-- matrix functions
function m_x_v(m,v)
	local x,y,z=v[1],v[2],v[3]
	return {m[1]*x+m[5]*y+m[9]*z+m[13],m[2]*x+m[6]*y+m[10]*z+m[14],m[3]*x+m[7]*y+m[11]*z+m[15]}
end
function m_x_m(a,b)
	local a11,a12,a13,a14=a[1],a[5],a[9],a[13]
	local a21,a22,a23,a24=a[2],a[6],a[10],a[14]
	local a31,a32,a33,a34=a[3],a[7],a[11],a[15]
	local a41,a42,a43,a44=a[4],a[8],a[12],a[16]

	local b11,b12,b13,b14=b[1],b[5],b[9],b[13]
	local b21,b22,b23,b24=b[2],b[6],b[10],b[14]
	local b31,b32,b33,b34=b[3],b[7],b[11],b[15]
	local b41,b42,b43,b44=b[4],b[8],b[12],b[16]

	return {
			a11*b11+a12*b21+a13*b31+a14*b41,a21*b11+a22*b21+a23*b31+a24*b41,a31*b11+a32*b21+a33*b31+a34*b41,a41*b11+a42*b21+a43*b31+a44*b41,
			a11*b12+a12*b22+a13*b32+a14*b42,a21*b12+a22*b22+a23*b32+a24*b42,a31*b12+a32*b22+a33*b32+a34*b42,a41*b12+a42*b22+a43*b32+a44*b42,
			a11*b13+a12*b23+a13*b33+a14*b43,a21*b13+a22*b23+a23*b33+a24*b43,a31*b13+a32*b23+a33*b33+a34*b43,a41*b13+a42*b23+a43*b33+a44*b43,
			a11*b14+a12*b24+a13*b34+a14*b44,a21*b14+a22*b24+a23*b34+a24*b44,a31*b14+a32*b24+a33*b34+a34*b44,a41*b14+a42*b24+a43*b34+a44*b44
		}
end
   
function m_clone(m)
	local c={}
	for k,v in pairs(m) do
		c[k]=v
	end
	return c
end
function print_m(m)
	for i=0,3 do
		local s=""
		for j=0,3 do
			s=s..m[i*4+j+1].."\t"
		end
		printh(s)
	end
end
function make_m_from_euler(x,y,z)
		local a,b = cos(x),-sin(x)
		local c,d = cos(y),-sin(y)
		local e,f = cos(z),-sin(z)
  
  -- yxz order
  local ce,cf,de,df=c*e,c*f,d*e,d*f
	 return {
	  ce+df*b,a*f,cf*b-de,0,
	  de*b-cf,a*e,df+ce*b,0,
	  a*d,-b,a*c,0,
	  0,0,0,1}
end
function make_m_from_v_angle(up,angle)
	local fwd={-sin(angle),0,cos(angle)}
	local right=v_cross(up,fwd)
	v_normz(right)
	fwd=v_cross(right,up)
	return {
		right[1],right[2],right[3],0,
		up[1],up[2],up[3],0,
		fwd[1],fwd[2],fwd[3],0,
		0,0,0,1
	}
end

function make_m_lookat(from,to)
	local fwd=make_v(from,to)
	v_normz(fwd)
	local right=v_cross(v_up,fwd)
	v_normz(right)
	local up=v_cross(fwd,right)
	return {
		right[1],right[2],right[3],0,
		up[1],up[2],up[3],0,
		fwd[1],fwd[2],fwd[3],0,
		0,0,0,1
	}
end

-- only invert 3x3 part
function m_inv(m)
	m[2],m[5]=m[5],m[2]
	m[3],m[9]=m[9],m[3]
	m[7],m[10]=m[10],m[7]
end
-- inline matrix invert
-- inc. position
function m_inv_x_v(m,v)
	local x,y,z=v[1]-m[13],v[2]-m[14],v[3]-m[15]
	v[1],v[2],v[3]=m[1]*x+m[2]*y+m[3]*z,m[5]*x+m[6]*y+m[7]*z,m[9]*x+m[10]*y+m[11]*z
end
function m_set_pos(m,v)
	m[13],m[14],m[15]=v[1],v[2],v[3]
end
-- returns basis vectors from matrix
function m_right(m)
	return {m[1],m[2],m[3]}
end
function m_up(m)
	return {m[5],m[6],m[7]}
end
function m_fwd(m)
	return {m[9],m[10],m[11]}
end

-- coroutine helper
function corun(f)
	local cs=costatus(f)
	if cs=="suspended" then
		assert(coresume(f))
		return f
	end
	return nil
end

-- sort
-- https://github.com/morgan3d/misc/tree/master/p8sort
-- 
function sort(data)
 local n = #data 
 if(n<2) return
 
 -- form a max heap
 for i = flr(n / 2) + 1, 1, -1 do
  -- m is the index of the max child
  local parent, value, m = i, data[i], i + i
  local key = value.key 
  
  while m <= n do
   -- find the max child
   if ((m < n) and (data[m + 1].key > data[m].key)) m += 1
   local mval = data[m]
   if (key > mval.key) break
   data[parent] = mval
   parent = m
   m += m
  end
  data[parent] = value
 end 

 -- read out the values,
 -- restoring the heap property
 -- after each step
 for i = n, 2, -1 do
  -- swap root with last
  local value = data[i]
  data[i], data[1] = data[1], value

  -- restore the heap
  local parent, terminate, m = 1, i - 1, 2
  local key = value.key 
  
  while m <= terminate do
   local mval = data[m]
   local mkey = mval.key
   if (m < terminate) and (data[m + 1].key > mkey) then
    m += 1
    mval = data[m]
    mkey = mval.key
   end
   if (key > mkey) break
   data[parent] = mval
   parent = m
   m += m
  end  
  
  data[parent] = value
 end
end

local sessionid,cam=0
local all_models={}
local k_far,k_near=0,2
local k_right,k_left=4,8
local z_near=0.05

-- camera
function make_cam()
	-- views
	local switching_async
	-- 0: far
	-- 1: close
	local view_mode=1
	-- view offset/angle/lag
	local view_pov={
		{-2.2,1.5,0.2},
		{-0.7,0.3,0.1}
	}
	local current_pov=v_clone(view_pov[view_mode+1])

	local t=0
	return {
		pos={0,0,0},
		angle=0,
		update=function(self)
			t+=1
			if switching_async then
				switching_async=corun(switching_async)
			elseif t%120>30 then
				local next_mode=(view_mode+1)%#view_pov
				local next_pov=v_clone(view_pov[next_mode+1])
				switching_async=cocreate(function()
					for i=0,29 do
						local t=smoothstep(i/30)
						current_pov=v_lerp(view_pov[view_mode+1],next_pov,t)
						yield()
					end
					-- avoid drift
					current_pov,view_mode=next_pov,next_mode
				end)
			end
		end,
		track=function(self,from,to)
			-- lerp position
			local pos=v_lerp(self.pos,from,current_pov[3])
			-- v_normz(up)

			-- shift cam position			
			local m=make_m_lookat(from,to)
			-- v_add(pos,m_fwd(m),current_pov[1])
			
			-- inverse view matrix
			m_inv(m)
			self.m=m_x_m(m,{
				1,0,0,0,
				0,1,0,0,
				0,0,1,0,
				-pos[1],-pos[2],-pos[3],1
			})
			
			self.pos=pos
		end,
		project_poly=function(self,p,c)
			local p0,p1=p[1],p[2]
			-- magic constants = 89.4% vs. 90.9%
			-- shl = 79.7% vs. 80.6%
			local x0,y0=63.5+flr(shl(p0[1]/p0[3],6)),63.5-flr(shl(p0[2]/p0[3],6))
			local x1,y1=63.5+flr(shl(p1[1]/p1[3],6)),63.5-flr(shl(p1[2]/p1[3],6))
			for i=3,#p do
				local p2=p[i]
				local x2,y2=63.5+flr(shl(p2[1]/p2[3],6)),63.5-flr(shl(p2[2]/p2[3],6))
				trifill(x0,y0,x1,y1,x2,y2,c)
				x1,y1=x2,y2
			end
		end
	}
end

-- game states
-- transition to next state
function next_state(state)
	draw_state,update_state=state()
end


function title_state()
	local vrtext
	local angle=0
	local t=0
	local cam_pos={5,1,0}
	return
		-- draw
		function()
			cls(12)

			local out={}
			-- track
			for i=-1,1 do
				local m={
					1,0,0,0,
					0,1,0,0,
					0,0,1,0,
					0,0,12*i-((12*time())%12),1}
			 		collect_model_faces(all_models["track"],m,nil,out)
			end

			sort(out)
			draw_faces(out)

			-- markings
			for i=-0.5,0.5 do
				local m={
					1,0,0,0,
					0,1,0,0,
					0,0,1,0,
					0,0,12*i-((12*time())%12),1}
			 		collect_model_faces(all_models["markings"],m,nil,out)
			end
			draw_faces(out)

			-- car
			out={}
			local wheel_m=make_m_from_euler(time(),0,0)
			local actor={
				rrw=wheel_m,
				lrw=wheel_m,
				lfw=wheel_m,
				rfw=wheel_m
			}
			local m={
				1,0,0,0,
				0,1,0,0,
				0,0,1,0,
				cos(time()/5)/3,0,0,1}
			collect_model_faces(all_models["car"],m,actor,out)

			sort(out)
			draw_faces(out)
			print(#out,2,110,7)

			print3d(56,96,27,9,110,118,time()/2)
			--[[
			local mem=0x6000+64*43
			for i=1,#vrtext,8 do
				poke4(mem,tonum("0x"..sub(vrtext,i,i+3).."."..sub(vrtext,i+4,i+7)))
			 	mem+=4
			end
			pal(8,0)
			sspr(55,64,54,12,17,50)
			sspr(55,76,59,15,54,65)
			pal()
			sspr(55,64,54,12,16,49)
			sspr(55,76,59,15,53,64)
			-- print("virtua\nracing",48,60,7)
			]]
		end,
		-- update
		function()
			t+=1
			if btnp(4) or btnp(5) then
				next_state(selection_state)
			end
			if t%120==0 then
				cam_pos={rnd(4)-2,1,rnd(4)-2}
			end
			local angle=time()/8			
			cam:track({-sin(angle),0.2,cos(angle)},{0,0,0})
		end
end

function selection_state()
	local t=0
	local track=0
 local track_tgt=0
	local track_spr={
		{0,0,level="beginner",c=7},
		{54,0,level="medium",c=7},
		{0,56,level="expert",c=10}
	}
 local width=54+12
	return
		-- draw
		function()
			cls(13)
			camera(-t%8+8,-t%8+8)        
			for i=0,17 do
				for j=0,17 do
					if band(i+j,1)==1 then
						spr(119,i*8,j*8)
					end
				end
			end
			camera()
			printb("⬅️ select track ➡️",28,2,7)            
			if track_tgt==track and t%4<2 then
				rectfill(34,9,93,70,10)
			end
			palt(0,false)
			local x=-width*track_tgt
			for i=1,#track_spr do
				local s=track_spr[i]
				sspr(s[1],s[2],54,56,flr(64+x-54/2),12,54,56)
				x+=width
			end
			if track_tgt==track then
				local s=track_spr[track+1]
				printb(s.level,nil,74,s.c)
				-- track records
				
			end
			palt()
		end,
		-- update
		function()
			t+=1
			if(btnp(0)) track-=1
			if(btnp(1)) track+=1					
			track=mid(track,0,2)

			local k=track
   track_tgt=lerp(track_tgt,k,0.18)
   -- snap when close to target
			if abs(track_tgt-k)<0.01 then
				track_tgt=k
			end			
		end
end

function _init()
	-- integrated fillp/color
	poke(0x5f34,1)

	unpack_models()
	cam=make_cam()

	-- init state machine	
	next_state(title_state)
end

function _update()
	-- basic state mgt
	update_state()
end

function _draw()
	draw_state()

	rectfill(0,0,127,6,8)
	print(stat(1),2,1,7)
end

-->8
-- unpack data & models
local mem=0x2000
function mpeek()
	local v=peek(mem)
	mem+=1
	return v
end

-- w: number of bytes (1 or 2)
function unpack_int(w)
  	w=w or 1
	local i=w==1 and mpeek() or bor(shl(mpeek(),8),mpeek())
	return i
end
-- unpack 1 or 2 bytes
function unpack_variant()
	local h=mpeek()
	-- above 127?
	if band(h,0x80)>0 then
		h=bor(shl(band(h,0x7f),8),mpeek())
	end
	return h
end
-- unpack a float from 1 byte
function unpack_float(scale)
	local f=shr(unpack_int()-128,5)
	return f*(scale or 1)
end
-- unpack a double from 2 bytes
function unpack_double(scale)
	local f=(unpack_int(2)-16384)/128
	return f*(scale or 1)
end
-- unpack an array of bytes
function unpack_array(fn)
	local n=unpack_variant()
	for i=1,n do
		fn(i)
	end
end
-- unpack a vector
function unpack_v(scale)
	return {unpack_double(scale),unpack_double(scale),unpack_double(scale)}
end

-- valid chars for model names
local itoa='_0123456789abcdefghijklmnopqrstuvwxyz'
function unpack_string()
	local s=""
	unpack_array(function()
		local c=unpack_int()
		s=s..sub(itoa,c,c)
	end)
	return s
end

function unpack_face()
	local f={flags=unpack_int(),c=unpack_int()}
	if(f.c==0x50) f.c=0x0150
	-- embedded fillp mode
	f.c+=0x1000.a5a5

	f.ni=band(f.flags,2)>0 and 4 or 3
	-- vertex indices
	-- quad?
	for i=1,f.ni do
		-- using the face itself saves more than 500KB!
		f[i]=unpack_variant()
	end
	return f
end

function unpack_model(model,scale)
	-- vertices
	unpack_array(function()
		add(model.v,unpack_v(scale))
	end)

	-- faces
	unpack_array(function()
		local f=unpack_face()
		-- inner faces?
		if band(f.flags,8)>0 then
			printh("inner faces...")
			f.inner={}
			unpack_array(function()
				add(f.inner,unpack_face())
			end)
		end		
		-- normal
		f.n=unpack_v()
		-- viz check
		f.cp=v_dot(f.n,model.v[f[1]])

		add(model.f,f)
	end)
end
function unpack_models()
	-- for all models
	unpack_array(function()
		local model,name,scale={lods={},lod_dist={}},unpack_string(),1/unpack_int()
		unpack_array(function()
			local d=unpack_double()
			assert(d<127,"lod distance too large:"..d)
			-- store square distance
			add(model.lod_dist,d*d)
		end)
  
		-- level of details models
		unpack_array(function()
			local lod={v={},f={},vgroups={}}
			unpack_model(lod,scale)
			-- unpack vertex groups (as sub model)
			unpack_array(function()				
				local name=unpack_string()
				printh("vgroup:"..name)
				local vgroup={offset=unpack_v(scale),f={}}
				-- faces
				unpack_array(function()
					local f=unpack_face()
					-- normal
					f.n=unpack_v()
					-- viz check
					f.cp=v_dot(f.n,lod.v[f[1]])

					add(vgroup.f,f)
				end)				
				lod.vgroups[name]=vgroup
			end)
		
			add(model.lods,lod)
		end)

		-- index by name
		all_models[name]=model
	end)
end

-->8
-- trifill & clipping
-- by @p01
function p01_trapeze_h(l,r,lt,rt,y0,y1)
  lt,rt=(lt-l)/(y1-y0),(rt-r)/(y1-y0)
  if(y0<0)l,r,y0=l-y0*lt,r-y0*rt,0
  for y0=y0,min(y1,128) do
   rectfill(l,y0,r,y0)
   l+=lt
   r+=rt
  end
end
function p01_trapeze_w(t,b,tt,bt,x0,x1)
 tt,bt=(tt-t)/(x1-x0),(bt-b)/(x1-x0)
 if(x0<0)t,b,x0=t-x0*tt,b-x0*bt,0
 for x0=x0,min(x1,128) do
  rectfill(x0,t,x0,b)
  t+=tt
  b+=bt
 end
end

function trifill(x0,y0,x1,y1,x2,y2,col)
 color(col)
 if(y1<y0)x0,x1,y0,y1=x1,x0,y1,y0
 if(y2<y0)x0,x2,y0,y2=x2,x0,y2,y0
 if(y2<y1)x1,x2,y1,y2=x2,x1,y2,y1
 if max(x2,max(x1,x0))-min(x2,min(x1,x0)) > y2-y0 then
  col=x0+(x2-x0)/(y2-y0)*(y1-y0)
  p01_trapeze_h(x0,x0,x1,col,y0,y1)
  p01_trapeze_h(x1,col,x2,x2,y1,y2)
 else
  if(x1<x0)x0,x1,y0,y1=x1,x0,y1,y0
  if(x2<x0)x0,x2,y0,y2=x2,x0,y2,y0
  if(x2<x1)x1,x2,y1,y2=x2,x1,y2,y1
  col=y0+(y2-y0)/(x2-x0)*(x1-x0)
  p01_trapeze_w(y0,y0,y1,col,x0,x1)
  p01_trapeze_w(y1,col,y2,y2,x1,x2)
 end
end

--[[
function trifill(x0,y0,x1,y1,x2,y2,col)
	line(x0,y0,x1,y1,col)
	line(x2,y2)
	line(x0,y0)
end
]]
-->8
-- 3d
function collect_faces(faces,cam_pos,v_cache,out,dist)
	local n=#out+1
	for _,face in pairs(faces) do
		-- avoid overdraw for shared faces
		if face.session!=sessionid and (band(face.flags,1)>0 or v_dot(face.n,cam_pos)>face.cp) then
			local z,y,outcode,verts,is_clipped=0,0,0xffff,{},0
			-- debug
			local center={0,0,0}
			-- project vertices
			for ki=1,face.ni do
				local a=v_cache[face[ki]]
				y+=a[2]
				z+=a[3]
				v_add(center,a)
				outcode=band(outcode,a.outcode)
				-- behind near plane?
				is_clipped+=band(a.outcode,2)
				verts[ki]=a
			end
			-- mix of near/far verts?
			if outcode==0 then
	   			-- average before changing verts
				y/=#verts
				z/=#verts
				-- debug
				v_scale(center,1/#verts)

				-- mix of near+far vertices?
				if(is_clipped>0) verts=z_poly_clip(z_near,verts)
				if #verts>2 then
					out[n]={key=1/(y*y+z*z),f=face,v=verts,dist=dist,center=center}
				 	-- 0.1% faster vs [#out+1]
				 	n+=1
				end
			end
			face.session=sessionid	
		end
	end
end

function collect_model_faces(model,m,parts,out)
	-- all models reuses the same faces!!
	sessionid+=1
	-- cam pos in object space
	local p,cm={},cam.m
	-- vertex group matrix
	-- using close to avoid repeating the cache function
	local vgm
	local cam_pos=make_v({m[13],m[14],m[15]},cam.pos)
	m_inv_x_v(m,cam_pos)
	
	-- select lod
	local d=v_dot(cam_pos,cam_pos)
	
	-- lod selection
	local lodid=0
	for i=1,#model.lod_dist do
		if(d>model.lod_dist[i]) lodid+=1
	end
	
	model=model.lods[min(lodid,#model.lods-1)+1]

	-- object to world
	-- world to cam
	m=m_x_m(cam.m,m)

	local v_cache={
		__index=function(t,k)
			local a=model.v[k]
			-- relative to vgroup or base matrix			
			a=m_x_v(vgm and vgm or m,a)
			
			-- world to cam
			local ax,az=a[1],a[3]
			local outcode=az>z_near and k_far or k_near
			if ax>az then outcode+=k_right
			elseif -ax>az then outcode+=k_left
			end	
			local a={ax,a[2],az,outcode=outcode}

			t[k]=a
			return a
		end
	}
	setmetatable(p,v_cache)
	-- main model
	collect_faces(model.f,cam_pos,p,out)
	-- sub models
	local m_orig=m_clone(m) 
	for name,vgroup in pairs(model.vgroups) do
		-- get world group position
		m_set_pos(m,m_x_v(m_orig,vgroup.offset))
		
		-- cam to vgroup space
		vgm=parts[name]
		local x,y,z=cam_pos[1]-vgroup.offset[1],cam_pos[2]-vgroup.offset[2],cam_pos[3]-vgroup.offset[3]
		local vg_cam_pos={vgm[1]*x+vgm[2]*y+vgm[3]*z,vgm[5]*x+vgm[6]*y+vgm[7]*z,vgm[9]*x+vgm[10]*y+vgm[11]*z}

		-- lookup vertex group orientation from parts
		vgm=m_x_m(m,vgm)


		collect_faces(vgroup.f,vg_cam_pos,p,out)
	end
end

function draw_faces(faces,v_cache)
	for i=1,#faces do
		local d=faces[i]
		cam:project_poly(d.v,d.f.c)
		-- details?
		if d.key>0.0200 then
			-- face details
			if d.f.inner then -- d.dist<2 then					
				for _,face in pairs(d.f.inner) do
					local verts,outcode,is_clipped={},0xffff,0
					for ki=1,face.ni do
						local a=v_cache[face[ki]]
						outcode=band(outcode,a.outcode)
						-- behind near plane?
						is_clipped+=band(a.outcode,2)
						verts[ki]=a
					end
					if outcode==0 then
						if(is_clipped>0) verts=z_poly_clip(z_near,verts)
						if(#verts>2) cam:project_poly(verts,face.c)
					end
				end
			end			
		end
		-- debug
		--[[
		if d.center then
			local x0,y0=63.5+flr(shl(d.center[1]/d.center[3],6)),63.5-flr(shl(d.center[2]/d.center[3],6))
			local n=v_clone(d.f.n)
			v_add(n,d.center,2)
			local x1,y1=63.5+flr(shl(n[1]/n[3],6)),63.5-flr(shl(n[2]/n[3],6))
			line(x0,y0,x1,y1,8)
		end
		]]
	end
end

function z_poly_clip(znear,v)
	local res={}
	local v0,v1,d1,t,r=v[#v]
	local d0=-znear+v0[3]
 	-- use local closure
 	local clip_line=function()
 		local r,t=make_v(v0,v1),d0/(d0-d1)
 		v_scale(r,t)
 		v_add(r,v0)
 		res[#res+1]=r
 	end
	for i=1,#v do
		v1=v[i]
		d1=-znear+v1[3]
		if d1>0 then
			if(d0<=0) clip_line()
			res[#res+1]=v1
		elseif d0>0 then
   clip_line()
		end
		v0,d0=v1,d1
	end
	return res
end

-->8
-- print helpers

-- bold print
function printb(s,x,y,c)
	x=x or 64-(#s*2.5)
    for i=-1,1 do
        for j=-1,1 do
            print(s,x+i,y+j,0)
        end
    end
    print(s,x,y,c)
end

-- print sprite sx/sy at y on screen
-- x centered
-- perspective correct rotation by angle
function print3d(sx,sy,sw,sh,x,y,angle)
	local cc,ss=cos(angle),-sin(angle)
	local z0,z1=2+cc,2-cc
	-- projection
 	local x0,x1,w0,w1=-sw*ss/z0,sw*ss/z1,sh/z0,sh/z1
 	if(x0>x1)x0,x1,w0,w1=x1,x0,w1,w0
 	local len=x1-x0
	-- perspective correct mapping
	local u,du,dw=0,sw*w1/len,(w1-w0)/len
	for x=x+x0,x+x1-0.5 do
		sspr(sx+u/w0,sy,1,sh,x,y-w0,1,2*w0)
 		u+=du
 		w0+=dw
	end
end

__gfx__
33333333333bbbbbbbb33bbbbb3bb3bbbbbbb33b333333333333334f41333331111fff4333333333333333333344113113333333333300000000000000000000
33333333333bbbbb3333333b3bbbbbbbbbbbb3b333333333333333333ff5111115fff433333333333333333333f4411111133333333300000000000000000000
3333333333b3b3333333333333333333bb33bbbbb3b33333333333333333ffff4344333333133333333333333333fffffff13333333300000000000000000000
33333333bbbbb3333333333334f44333333333bbbb33333333333333333333333333333333131111111133333333344fffff3333333300000000000000000000
33333333bbbb333333366666666344f4343ff33bbbb33333333333333333333333333333333111111111331333333333333f3333333300000000000000000000
3333333bb3bb333360000000000000066634ff333333bbb333333333333333333333333333700000000d1111333333333f133333333300000000000000000000
3333333333bbb33600066666666000000066644f33333bbb33333333333333333333333337000d777d00d111333333333f133333333300000000000000000000
3333333333b3336006f111cccccccf336660006fffff33bbb33333333333333333333333d0075544f44d00d11133333333f13333333300000000000000000000
333333b33b33336006511c1c1ccfff3bb3360056fcccf333b33333333313333333333331d00d44ffffffd00d1113333333411333333300000000000000000000
33333b33bb33336006f1fff11cfb3bbb333f400ccc1cc333bbb333111111333333333311d00dcccccccccdd000d11333333f3333333300000000000000000000
3333333bb333336006ff33fff33bbbbb334419091cccc3bbbb3b33111111313333333311d00dcccccccccc4ddd0dd133333f3333333300000000000000000000
33333333bb333360063bb33b333333b33441190091cc33bbbbb333fff4111113333314ffd00dc1111cccccccf4d00d3333413333333300000000000000000000
5333333bbb33336006bbbbb333bb3bb344411190911c33bbb3b333cfff41111111114f88888888111111ccccffd00dd333f43333333300000000000000000000
f433333bbbb33360063bbb33b3bbb3334541119009cc5bbbb33333cccccff111554ffcc8d00d81111111cccccfd00dd333443333333300000000000000000000
c4f4533bbbbb3360063b33b3bbb333345f11111999ccf3bbb33333ccccccffffffffccc8d00d81111111111ccfd00dd331333333333300000000000000000000
cccf433bbbbb33600633bb3bbbb3333451111119091cc53bb33333c1cc1ccccffffcccc870078111111111cccf7007d341333333333300000000000000000000
1c1cff33bbb33360063bb33bbbb334ff41111119091ccf33b3333311111ccccccccccc18d00d8111111111cccfd00dd333f31333333300000000000000000000
1111cff3bb333360063bb3b3bb3b34fff11111199911c333b33b33111111c1cccc1cc1c8d00d8111111111cccfd00dd333f31333333300000000000000000000
1111ccfbbb333360063bb3bb33333343ff451119991cc33bbb3bb3111111111cc11c11187007811111111ccccf7007d333f41333333300000000000000000000
1111cccbbb33336006333b3333333333ff45111909ccf33bbbbb3311111111111c11111870078111111111cccf7007d333f13333333300000000000000000000
111ccc4b3b33336006333b33333344ff4445419009cf333b33333311111111111111111870078111111111cccf7007d344433333333300000000000000000000
c1c1c3b3b3333360063bbbb3b3334fff545f11909ccf333333333311111111111111111870078111111111cccf7007d34f133333333300000000000000000000
c43ccbbbb33333600633bbb33333f4f5f5f1190911ff3333333333111111111111111118700781111111111ccfd00dd4ff133333333300000000000000000000
33fcfbbbb33336600633bb33333345f11111909111cf443333354f111111111111111118d00d811111111111cc7007d441333333333300000000000000000000
334fbbbb333366600633bb33334f451111190091111cf4443344f4111111111111111118d00d811111111111ccd00dd4f5131333333300000000000000000000
b3bbbbbb333655000633b3334fff4f11119009111f11cccf45fccc11111111111111111870078111111111111cd00dd344113333333300000000000000000000
33bbbbbb33367500063bb334ffff441111909111f3f1c1ccfff1c11111111111111111187007811111111111ccd00dd344133333333300000000000000000000
3333bbbbb3367500063bbbb3334551111900911f33fc1cc1c11111111111111111111118700781111111111cccd00dd334133333333300000000000000000000
33333bbbb3365500063bbbbb3b355551190911133b3f4c44cc1111111111111111111118d00d81111111111cccd00dd334f13333333300000000000000000000
333333bbb336550006333bbb3bb3344f6009333bbbbb3333333f4c111111111111111188888888111111111cccd000d334ff3333333300000000000000000000
333333bbb336750005763b33bbbb3ff46006333bbbb3333333b3fc111111111111111111d00d1111111111cccc1d0003334f1333333300000000000000000000
333333bbb3365a0005763333bbbb33f3600633b33bb3333333bb33111111111111111111d000d111111111cccf133d0073331133333300000000000000000000
333333bb3336a60005763333333b333f3600633333bbbbbbbbbbbb111111111111111111d0000d1111111ccccc44337000734f41133300000000000000000000
333333bbb336aa0005763b333333bb3f46006333333bb333bb3bbb111111111111111111d00d0d1111111ccccc4f4437000d4ff4133300000000000000000000
333333bbb336aa00053333bbb33bbbb3f36006333333333333bbbb111111111111111111d00d0d1111111cccccff44f13d00dfff433300000000000000000000
333333bbb336a600057633bbbbbbbbbb33360063333333333333bb111111111111111111d00d0d11111111cc1ccff4ff4d00d3fff33300000000000000000000
3333bbbb3336a600057633bbbbbbbbbbbb33600633333333333333111111111111111111d00d0d1111111111c1ccccfffd00d3ff511300000000000000000000
333bbbbbb336aa00053333bbb33333bbbb3f60064333334433333311111111111111111cd00d0d111111111111cccccf4d00d3fff11100000000000000000000
33bbbbbbb336aa00057633334fff43bbbb33f60563334f443334f31111111111111cccffd00d0d11111111111111cccf3d00d14ff11300000000000000000000
33bbbbbbb336a60005763333fffff333b333f600633fff433333f3111111111111cccf44d00d0d1111111111111ccccf3d00d1fff11100000000000000000000
33bbbbbb3336a600063333360000063f3ff436006ff33333bb3453111111111cccf44511d00d0d1111111111111cccf3d000d354f44100000000000000000000
33bbbbbb3336a600063b3f000666600633336006ff333bbbbbb34f1111111ccc44451111d00d0dc1cccccccc11cccffd000d3315f51400000000000000000000
33bbbbbbb3635a00063b3f00634ff6006336006ff333b3bbbbb35f77d777dddd77dd113370070dccccccccc1c1cccf3d000d3154444f00000000000000000000
333bbbb336335560063b34006f333f45000054f4333bb333bbb34f000000000000000d3370070dccffff4cccccccf3d000d315444fff00000000000000000000
333bbbb3f3333360063334006f3b33f450054f3333b333333bb33477d777dddd77d00d337007dfff4f4f4fcccccffd0000d15444ff4400000000000000000000
33bbb333f3333360063b3400733bb3b3ffff3bb3333333333bbb331111ccf445111d0dd0700731151111544fcccf3d0000d35444444400000000000000000000
33bbb333f333336006333f006f33bbb33443b3bbb333333333bbb3cccccf4411113d0d007007311133331111fcff5d0d00d31444455400000000000000000000
3bbbb333f333336006333f00634433bbbbbbbbbb3b3333333b3bbbffff411111333d0007d00d3333d0000d3155111d0d00d35555115400000000000000000000
3bbbb333f333336006333f00633443bbbb3bbbbb3bb33333333bbbff45513113333d00d3d00d3337000000d15111d00700d31115311400000000000000000000
333bb333f3333360064f43006333f43bbbb3bb33333333333333bb4511133333333d00d3d00d3d000d333d00d3d00d1d00d33333333300000000000000000000
3333bb33ff333360006660006334f3bbbb333b33333333333333331111113333333d00d3d00d3d00d333333d0000000d00d00000000000000000000000000000
33333bb34f33333600000006333bf33bbb333b3b3333333333b33b1113333333333d00d3d00d3d00d3333333d000000d00d00000000000000000000000000000
333bbbb33f3333336666666333bf433bb333333333333333333b333333333333333d00d3d00d3d00d33333333333333d00d33333333300000000000000000000
33333b3334f3333333333333334f33bbb333bb33333333333333333333333333333d0007d00d7000d33333333333333d00d33333333300000000000000000000
33333333334f33333333333334f3333b333b33333333333333333333333333333333d000d00d000d333333333333333d00d33333333300000000000000000000
333333333334f433333333334f4333333333333333333333333333333333333333333dd0d00d0dd3333333333333333d00d33333333300000000000000000000
66666fffffff6ffff6666666444444466ffffff6ff66666666666600777777770000000000000000000000000000000000000000000000000000000000000000
66666ffffff6fffff4466444444444466f66fff6666fff6666ff6600666666670000000000000000000000000000000000000000000000000000000000000000
666f6ff6466f44444444444466666644466646ff66666ff666ffff00666666660000000000000000000000000000000000000000000000000000000000000000
66666f6466644454444444666666664444444ff666f66666666fff00666666660000000000000000000000000000000000000000000000000000000000000000
66666f6444445554666666666666f6644444446f6fff66f6f666ff00666666660000000000000000000000000000000000000000000000000000000000000000
6f666ff444555446666446666666664466645544f666f64666ff6f00666666660000000000000000000000000000000000000000000000000000000000000000
ff6666444454446f664444444444444444644544f6646664666fff00666666660000000000000000000000000000000000000000000000000000000000000000
666ff666444666666444455555544555546664444444444444446600666666660000000000000000000000000000000000000000000000000000000000000000
6ffff6ff444666664445555555555555544666445444544455444608880000000888088800000000000080000000000000000000000000000000000000000000
ffff66ff4466666f4445560000000000644666644444444555554400888000008880088800000000008880000000000000000000000000000000000000000000
ffff6fff446f64664444600000000000064466664444446444554400888000008880000000000000008880000000000000000000000000000000000000000000
46f66f44466f64444460063333333366006446646666666666445400888800088880088800888088088888800888000888000088888800000000000000000000
6666f4444666644447006336666666f6006444644466664666644400088800088800088800888880088888800888000888000888888880000000000000000000
4446644446444447007336666666ffff600644444444445644466600088800088800088800888000008880000888000888008880008880000000000000000000
4444446666644600733666f6666f46ff660064445555555544446600088880888800088800888000008880000888000888000000888880000000000000000000
444444666644600733666f633336f46f646006667777766555444600008880888000088800888000008880000888000888000888888880000000000000000000
4444466644600633666f630000003464444600000000000065544400008880888000088800888000008880000888000888008888008880000000000000000000
44446664460063366666300066003444444466666666666006544400000888880000088800888000008880000888000888008880008880000000000000000000
666666444600666666430063360034444446fccccccccccc60064400000888880000088800888000008888800888888888008888888880000000000000000000
6666644446006f66664300733700364446fccccccccccccc60064400000888880000088800888000000888800088880888000888808880000000000000000000
4446464446006f6f6443007337003fcccccccccccccccccc60075508888888800000000000000000000000000888000000000000000000000000000000000000
4444444556006ffff443007337003fcccccccccccccccccc60075508888888880000000000000000000000000888000000000000000000000000000000000000
4444445337007fff6443006337003fcccccccccccccccccc60065508880008880000000000000000000000000000000000000000000000000000000000000000
5553333bb6006fff4443006337003fccccccccccccccccc006545408880008880000088888800000888880000888008880888800000888088800000000000000
33333bbbb6006fff46f6300636003fcccccccccccccccc6065444408880008880000888888880008888888000888008888888880008888888800000000000000
b3bbbbbb6000744446ccf630050036fcccccccccccccc60644444408888888800008880008880088880088800888008880008880088800888800000000000000
bbbbbbbb6000744446cccf630060036fccccccccccccc60654444408888888000000000888880088800000000888008880008880088800088800000000000000
bbb3775005007444466fcccf630060036fccccccccccc60755544408880088800000888888880088800000000888008880008880088800088800000000000000
bbb37750050076f66ffcccccf630060036fcccccccccc60754444408880088800008888008880088800000000888008880008880088800088800000000000000
bbb37750050076ccccccccccccf630060036fcccccccc60654444608880008880008880008880088880088800888008880008880088800888800000000000000
bbb33330050076cccccccccccccf630060036fccccccf60644666608880008880008888888880008888888000888008880008880008888888800000000000000
bbb37750050076cccccccccccccccf630060036fffb3300544666608880000888000888808880000888880000888008880008880000888088800000000000000
bbb37750050066cccccccccccccccccf630060033330065554444600000000000000000000000000000000000000000000000000000000088800000000000000
bbb33330050076ccccccccccccccccccf63006006600634544446600000000000000000000000000000000000000000000000000088888888000000000000000
bbb37750050076cccccccccccccccccccc6b30060063333444446600000000000000000000000000000000000000000000000000008888880000000000000000
bbb37750050066ccccccccccccccccccccf6b3006637333444666600000000000000000000000000000000000000000000000000000000000000000000000000
bbb33336000076cccccccccccccccccccccfb6003733335466666600000000000000000000000000000000000000000000000000000000000000000000000000
33bbb333600066ccccccccccccccccccccfb60067333333446666600000000000000000000000000000000000000000000000000000000000000000000000000
43555444360066cccccccccccccccccccc6006733b33335444466400000000000000000000000000000000000000000000000000000000000000000000000000
454444453600666ccccccccccccccccccc600633b333335544444400000000000000000000000000000000000000000000000000000000000000000000000000
66466444436006366ccccccccccccccccc7007bbbbbb333544455500cccccc00c7c00cccccc00cccccc000000000000000000000000000000000000000000000
444446644553600736cccccccccccccccc7007b33344b3335353330077777cc0c7c0cc777770cc7777cc00000000000000000000000000000000000000000000
4444444444453700636ccccccccccccccc6006334355553333333300ccccc7c0c7c0c7ccccc0c7cccc7c00000000000000000000000000000000000000000000
44466444464433360063666666ccccccf360063544444453333333007777c7c0c7c0c7c00000c7c00c7c00000000000000000000000000000000000000000000
6666f4444664433360066776666ccccf360063354444445333333300ccccc7c0c7c0c7c00000c7c00c7c00000000000000000000000000000000000000000000
666f6ff4446664445360000000067766006554446644444533333300c7777cc0c7c0c7c00000c7c00c7c00000000000000000000000000000000000000000000
fff6ffff4466664444366776600000000654444446f4444333333300c7cccc00c7c0c7c00000c7c00c7c00000000000000000000000000000000000000000000
f6fff6ff446666664555555554667766454446666666444445433300c7c00000c7c0c7ccccc0c7cccc7c00000000000000000000000000000000000000000000
fffff6ff446666664445555555333333554446444666446445433300c7c00000c7c0cc777770cc7777cc00000000000000000000000000000000000000000000
666ff6664444666f6444444555444455544454444664444445433300ccc00000c7c00cccccc00cccccc000000000000000000000000000000000000000000000
6f666f6444554445666446644446644446544544f644444644354300000000000000000000000000000000000000000000000000000000000000000000000000
66666ff44445544455f6466666666666644444444646644466445300000000000000000000000000000000000000000000000000000000000000000000000000
66666f64444455555446666666664666454444444664644646464400000000000000000000000000000000000000000000000000000000000000000000000000
66666644444444555546666664666464444446664664664446466500000000000000000000000000000000000000000000000000000000000000000000000000
6666f66f666ff644444444444644464454466f646666646444444400000000000000000000000000000000000000000000000000000000000000000000000000
66666f6ff6f6fffff444444444444444444446666666f44464544600000000000000000000000000000000000000000000000000000000000000000000000000
__map__
03030e0c1d1a0150000173415c405543a8415c40e74284415c40324284415c403243a83ea4403243a83ea4403242843ea440e742843ea4405543a840e440ae3c9040e440903bae40e441cf3bae40e441cf3c903f1c41cf3bae40e640e73c903f1a40e73c903f1a41953bae40e641953bae40e641953c903f1a41953c903f1c41
cf3c903f1c40903bae3f1c40ae3c9040e640e73bae3f1a40e73bae3f9a40003f5b3f9a408f3fae4066408f40524066408f3fae3f9a3f713fae40663f714052406640003f5b40663f713fae3f9a3f7140524066400040a53f9a400040a53f9a408f40523f8040cc3ebc3fd4417a3e98408040cc3ebc404d40de40bd4000404843
903eb240a33e96408a4021403440b040213d343f5040213d34414e40a33e963ede40b53f94407c40623c063f0040923d98414e40213e8c3eb240213e8c412240b53f943ede40213f943f76402140343f9f40de4034401e41923f893f8640d53f893faf40a13d343f0040213d833f8440623c06410040923d98406140de403440
5140a13d343fe241923f89407a40d53f89400041323d6c402c417a3e983fb340de40bd412240213f944000409b3bf0410040213d83406640003f5b4066408f3fae3f9a408f40523f9a408f3fae40663f713fae3f9a3f7140523f9a40003f5b3f9a3f713fae40663f7140523f9a400040a54066400040a54066408f40523f9a40
003f5b3f9a408f3fae4066408f40524066408f3fae3f9a3f713fae40663f714052406640003f5b40663f713fae3f9a3f7140524066400040a53f9a400040a53f9a408f4052406640003f5b4066408f3fae3f9a408f40523f9a408f3fae40663f713fae3f9a3f7140523f9a40003f5b3f9a3f713fae40663f7140523f9a400040
a54066400040a54066408f40523e1d40003bdb41e340003bdb3e1d40003d2541e340003d253e1d400040db41e3400040db3e1d4000422541e3400042252c0311010203044080400040000311050607083f80400040000388090a0b0c3f80400040000388140d151640804000400003280e17180f40003f804000037710111213
40004080400000663f2743407340343fec00114428294000407d401a00772e343e4017407e3ffb00772a25373fe8407e3ffc00283c463a3fc840723ff00088302c3f4067404d3fff02662e3d4732407a40053fdb02663245342e407e3fff401502662a2f35333f823fff40150266333b312a3f8640053fdb001630463c40003f
d23f8802772a313a253feb407d3ff00077372f2a3fe9407e3ffb0200452b3e344057400b405d02002f3736353fa9400b405d0266363744293f84401a4013026638413940400040004080026629283e2b407c401a401302883a313b2d3fb840253f9d00283f4630403840723ff000883a2d3c3f99404d3fff02553c2d2c304000
3f833fe502882c473d3f404840253f9d025539412844400040803ffc00772e3e274018407e3ffc0277273f3d2e4015407d3ff00066253a263f8d40343fec0028423a463f9840453fe50028463f42406840453fe50277384026434000407f3ff300884326424000407c3fe20266432741384073403840010088423f4340674046
3fe00266252640393f8d40384001008842263a3f9940463fe003770306050440003f80400003506c6d6f6e4000408040000350707173724000408040000403171d223e8240903c800a0255555f5e543f8040004000020555545a57400040403f91025556575a5d40804000400002555e5c58543f8040004000025554585b5a40
003fc03f910255595d5a5b4080400040000205585c595b40003f80400002555c5e5d5940003fc0406f02055e5f565d40004040406f02555f555756400040804000031d1d22417e40903c800a025561606a6b408040004000020561636660400040403f910255626966633f804000400002556a60646840804000400002556066
676440003fc03f910255656766693f804000400002056467656840003f80400002556865696a40003fc0406f02056a69626b40004040406f02556b626361400040804000031711223e82409041800a02551a2423193f804000400002051a191f1c400040403f9102551b1c1f22408040004000025523211d193f804000400002
55191d201f40003fc03f9102551e221f2040804000400002051d211e2040003f80400002552123221e40003fc0406f020523241b2240004040406f0255241a1c1b400040804000031d1122417e409041800a0255494852534080400040000205494b4e48400040403f9102554a514e4b3f8040004000025552484c5040804000
40000255484e4f4c40003fc03f9102554d4f4e513f804000400002054c4f4d5040003f8040000255504d515240003fc0406f020552514a5340004040406f0255534a4b49400040804000051f1d0c0e1601015000016c3f094001400040f9400140003ebe401040003ed9400040003d3e402f400040f9400142013f0940014201
41434010400042c1402f400042c1403041ff3ed9400441ff412a400040003e31405f40d53e65401541173e9e405f41603e65413541173dfd4071405d3e45401540683e83407140713e45416340683c10408440513c32402a40b33c57407441013c32415840b23d34408240833d69402a40c23da4406e410d3d69411040c641e1
4060407141bb400f40c841944052411f41bb414340c842d4404f41c942fc4011418a43254050415642fc416b41873ed9400543ff4143401041ff3d3e401f41fe3ebe401041fe4129400441ff4143401043ff3c7a408242543cb4402a428f3cf4406d42e03cb4415d42963d44408442373d7e402a42853dbf406e42cb3d7e4113
428441f8404b42c641ae40174305415f404b434a41ae412e43054242406e41d742244017421e41ff406e427442244147421e4353404643d3437740114397439c4040435d43774178438742874050439742aa4011436942cd4048432742aa4153436443d2404842f543ea401142bc43ff4048426e43ea417142ae3f0940014401
40f94001440141434010460042c1402f43ff3d3e402f43fe3ebe401143fe3ebe401046003ed84004460041294004460040f9400146004129400543ff3db4405d44033dc1400c44493dd1405d448b3dc1414c44493e4a404f44c03e73400c44f43eab404f453d3e73411e44f43d7e408244a13da7402a44e93dd44089453d3da7
415144e93c94408143a33cc8402a43f03d02406744263cc8414e43f541ed405044d341bc401944f7418f4050451f41bc412f44f7426e405045a9428f4011457a42af4050452f428f414145773f094001460042c1402f46003d3d402f460028023b070b0401400240803fff03dd0607010240004080400002332608090a3ff640
804000023b2705032840084080400202992803040b403d407140000233020c29063ffe40803fff0299290c08263fc14070400003b30d0e0f10406440003fb1033311121314401340003f81033515161718407740003fd10335191a1b1c406440013fb003b31d1e1f204075400040340335212223243f983fff3fb6023b47250b
07400840804000036d48470706400040804000023b2a260a4a3ff64080400002334b27284c400840803ffe02494c280b254035407440000233062951483ff84080400002995129262a3fca4074400003352b2c2d2e406140023fac03352f303132406240003fae03b33334353640544000406103bb3738393a40764000403203
353b3c3d3e3f933ffd3fbd03353f4041423f933fff3fbc0335434445463f873ffe3fd702336a4e25474008408040000366506a4748400040804000023b492a4a6b3ff640804000023b6c4b4c4d400a4080400002994d4c254e403540744000023b48514f503ff84080400002494f512a493fca4074400003bb52535455407d40
003fe5033356575859406540003fb103bb5a5b5c5d407040003fc203355e5f6061406240023fae03b3626364654051400040630335666768693f8f40003fc40008180c1d161419121e01015000011c3f2f4001400040cf400140003f2f400142013f34400140003ffe400141633ffe400140c34004400140c340044001416340
d4400140003ffe400143453ffe400142a54004400142a54004400143453f34400142013f344001440140cf4001440140cf4001420140d44001420140d4400144013f2f400146003f2f400144013ffe400145273ffe4001448740044001448740044001452740cf4001460040d4400146003f34400146000903770301040e4000
4080400003770506070840004080400003771102091240004080400003770a0b0c0d400040804000037715030e0f400040804000037710111213400040804000037714150f1c40004080400003771617181940004080400003771a10131b40004080400000000000000000000000000000000000000000000000000000000000
