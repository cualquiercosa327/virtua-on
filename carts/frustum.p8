pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
-- vector & tools
function make_v(a,b)
	return {
		b[1]-a[1],
		b[2]-a[2],
		b[3]-a[3]}
end
function v_clone(v)
	return {v[1],v[2],v[3]}
end
function v_dot(a,b)
	return a[1]*b[1]+a[2]*b[2]+a[3]*b[3]
end
function v_scale(v,scale)
	v[1]*=scale
	v[2]*=scale
	v[3]*=scale
end
function v_add(v,dv,scale)
	scale=scale or 1
	v[1]+=scale*dv[1]
	v[2]+=scale*dv[2]
	v[3]+=scale*dv[3]
end
function v_min(a,b)
	return {min(a[1],b[1]),min(a[2],b[2]),min(a[3],b[3])}
end
function v_max(a,b)
	return {max(a[1],b[1]),max(a[2],b[2]),max(a[3],b[3])}
end

local v_up={0,1,0}

-- matrix functions
function m_x_v(m,v)
	local x,y,z=v[1],v[2],v[3]
	v[1],v[2],v[3]=m[1]*x+m[5]*y+m[9]*z+m[13],m[2]*x+m[6]*y+m[10]*z+m[14],m[3]*x+m[7]*y+m[11]*z+m[15]
end

function make_m_from_euler(x,y,z)
		local a,b = cos(x),-sin(x)
		local c,d = cos(y),-sin(y)
		local e,f = cos(z),-sin(z)
  
  -- yxz order
  local ce,cf,de,df=c*e,c*f,d*e,d*f
	 return {
	  ce+df*b,a*f,cf*b-de,0,
	  de*b-cf,a*e,df+ce*b,0,
	  a*d,-b,a*c,0,
	  0,0,0,1}
end
-- only invert 3x3 part
function m_inv(m)
	m[2],m[5]=m[5],m[2]
	m[3],m[9]=m[9],m[3]
	m[7],m[10]=m[10],m[7]
end
function m_set_pos(m,v)
	m[13],m[14],m[15]=v[1],v[2],v[3]
end
-- returns basis vectors from matrix
function m_right(m)
	return {m[1],m[2],m[3]}
end
function m_up(m)
	return {m[5],m[6],m[7]}
end
function m_fwd(m)
	return {m[9],m[10],m[11]}
end

-- bbox
local one_if=function(cond)
	return cond>0 and 1 or 0
end
function make_bbox(width)
	local vmin,vmax={0,0,0},{width,width,2*width}
	local size=make_v(vmin,vmax)
	-- generate vertices
	local v={}
	for i=0,7 do
		local v1={
			one_if(band(0x2,i))*size[1],
			one_if(band(0x4,i))*size[2],
			one_if(band(0x1,i))*size[3],
		}
		v_add(v1,vmin)
		add(v,v1)
	end
	
	return v
end

function make_plane(width)
	return {
		{0,0,0},
		{width,0,0},
		{width,0,width},
		{0,0,width}
	}
end

-- sort
-- https://github.com/morgan3d/misc/tree/master/p8sort
function sort(data)
 local n = #data 
 if(n<2) return
 
 -- form a max heap
 for i = flr(n / 2) + 1, 1, -1 do
  -- m is the index of the max child
  local parent, value, m = i, data[i], i + i
  local key = value.key 
  
  while m <= n do
   -- find the max child
   if ((m < n) and (data[m + 1].key > data[m].key)) m += 1
   local mval = data[m]
   if (key > mval.key) break
   data[parent] = mval
   parent = m
   m += m
  end
  data[parent] = value
 end 

 -- read out the values,
 -- restoring the heap property
 -- after each step
 for i = n, 2, -1 do
  -- swap root with last
  local value = data[i]
  data[i], data[1] = data[1], value

  -- restore the heap
  local parent, terminate, m = 1, i - 1, 2
  local key = value.key 
  
  while m <= terminate do
   local mval = data[m]
   local mkey = mval.key
   if (m < terminate) and (data[m + 1].key > mkey) then
    m += 1
    mval = data[m]
    mkey = mval.key
   end
   if (key > mkey) break
   data[parent] = mval
   parent = m
   m += m
  end  
  
  data[parent] = value
 end
end

-->8
-- main engine
local angles={}
function make_cam(x0,y0,focal)
	local angle=0
	for i=0,127 do
		add(angles,atan2(64,i-64))
	end
	return {
		pos={0,0,0},
		track=function(self,pos,a,m)
   self.pos=v_clone(pos)
   -- v_scale(self.pos,1/8)
   -- height
   v_add(self.pos,m_fwd(m),-2)
   self.pos[2]+=0.5
			angle=a
			-- inverse view matrix
   m_inv(m)
   self.m=m
  end,
	 project2d=function(self,x,y)
	 	return x*8,128-y*8
	 end,
	 project=function(self,v)
	  -- view to screen
   local w=focal/v[3]
   return x0+ceil(v[1]*w),y0-ceil(v[2]*w),w
	 end,
	 visible_tiles=function(self)
  	local x,y=self.pos[1]/16,self.pos[3]/16
   local x0,y0=flr(x),flr(y)
   local tiles={
    [x0+16*y0]=true
   } 
   
   for i=1,128 do
   	
   	local a=angles[i]+angle
   	local v,u=cos(a),-sin(a)
   	
    local mapx,mapy=x0,y0
   
    local ddx,ddy=abs(1/u),abs(1/v)
    local mapdx,distx
    if u<0 then
    	mapdx=-1
     distx=(x-mapx)*ddx
    else
    	mapdx=1
     distx=(mapx+1-x)*ddx
    end
   	local mapdy,disty
    if v<0 then
    	mapdy=-1
     disty=(y-mapy)*ddy
    else
    	mapdy=1
     disty=(mapy+1-y)*ddy
    end	
    for dist=0,0 do
   		if distx<disty then
   			distx+=ddx
   			mapx+=mapdx
   		else
   			disty+=ddy
   			mapy+=mapdy
   		end
   		-- non solid visible tiles
   		if mapx>=0 and mapy>=0 and mapx<16 and mapy<16 then
   			tiles[mapx+16*mapy]=true
   		end
   	end				
  	end	
  	return tiles
	 end
	}
end

function make_plyr(p)
	local pos,angle,m=v_clone(p),0
	local oldf
	local velocity=0
	return {
	 get_pos=function()
	 	return pos,angle,m
	 end,
		handle_input=function()
  	local dx,dy=0,0
  	if(btn(2)) dx=1
  	if(btn(3)) dx=-1
  	if(btn(0)) dy=-1
  	if(btn(1)) dy=1
  	
  	angle+=dy/64
  	if(oldf) dx/=8
  	velocity+=dx
		end,
		update=function()
  	velocity*=0.8

			-- update orientation matrix
			m=make_m_from_euler(0,angle,0)
			v_add(pos,m_fwd(m),velocity/4)
			v_add(pos,v_up,-0.2)
			-- find ground
			local newf,newpos=find_face(pos,oldf)
			if newf then		
				pos[2]=max(pos[2],newpos[2])
				oldf=newf
			end
			m=make_m_from_euler(0.01,angle,0)
		end
	}
end

local cam=make_cam(63.5,63.5,128)
local plyr=make_plyr({0,32,0})
local bbox=make_bbox(1)
local plane=make_plane(16)
local all_models={}

local track

local dither_pat={0xffff,0x7fff,0x7fdf,0x5fdf,0x5f5f,0x5b5f,0x5b5e,0x5a5e,0x5a5a,0x1a5a,0x1a4a,0x0a4a,0x0a0a,0x020a,0x0208,0x0000}

function project_poly(p,c)
	if #p>2 then
		local x0,y0=cam:project(p[1])
    local x1,y1=cam:project(p[2])
		for i=3,#p do
			local x2,y2=cam:project(p[i])
			trifill(x0,y0,x1,y1,x2,y2,c)
		  x1,y1=x2,y2
		end
	end
end

function is_inside(p,f)
	local v,vi=track.v,f.vi
	local inside,p0=0,track.v[vi[#vi]]
	for i=1,#vi do
		local p1=v[vi[i]]
		if((p0[3]-p1[3])*(p[1]-p0[1])+(p1[1]-p0[1])*(p[3]-p0[3])>0) inside+=1
		p0=p1
	end
	if inside==#vi then
		-- intersection point
		local t=-v_dot(make_v(v[vi[1]],p),f.n)/f.n[2]
		p=v_clone(p)
		p[2]+=t
		return f,p
	end
end

function find_face(p,oldf)	
	-- same face as previous hit
	if oldf then
		local newf,newp=is_inside(p,oldf)
		if(newf) return newf,newp
	end
	-- voxel?
	local x,z=flr(p[1]/16),flr(p[3]/16)
	local faces=track.voxels[x+16*z]
	if faces then
		for _,f in pairs(faces) do
			if f!=oldf then
				local newf,newp=is_inside(p,f)
				if(newf) return newf,newp
			end
		end
	end
	-- not found
end

function _init()
	track=all_models["track"]	
end

function _update()
	plyr:handle_input()
	
	plyr:update()
	
	cam:track(plyr:get_pos())
end

local sessionid=0
local k_far=1
local k_near=8
local current_face

function _draw()
	sessionid+=1
 cls(12)
 --rectfill(0,24,127,127,7)

 local p={}
 -- model to
 local function v_cache(k)
  local a=p[k]
  if not a then
   -- world to cam
			a=make_v(cam.pos,track.v[k])
   m_x_v(cam.m,a)
   p[k]=a
  end
  return a
 end
 
 local tiles=cam:visible_tiles()

 for k,_ in pairs(tiles) do
	 local i,j=k%16,flr(k/16)
 	local offset={16*i,0,16*j}
 	local p0=v_clone(plane[4])
 	v_add(p0,offset)
 	v_add(p0,cam.pos,-1)
	 m_x_v(cam.m,p0)
 	local x0,y0,w0=cam:project(p0)
  for k=1,4 do
 	 local p1=v_clone(plane[k])
 	 v_add(p1,offset)
 	 v_add(p1,cam.pos,-1)
	  m_x_v(cam.m,p1)
 		local x1,y1,w1=cam:project(p1)
 		if w0>0 and w1>0 then
 			line(x0,y0,x1,y1,11)
 		end
 		x0,y0,w0=x1,y1,w1
 	end
 end
 
 --[[
 local scale=1
 local x0,z0=cam.pos[1],cam.pos[3]
 local dx,dy=x0%scale,z0%scale

 for i=-8,8 do
 	local ii=scale*i-dx+x0
 	for j=-8,8 do
 		local jj=scale*j-dy+z0
 		local v={ii,0,jj}
 		v_add(v,cam.pos,-1)
   m_x_v(cam.m,v)
 		local x,y,w=cam:project(v)
			if w>0 then
 			pset(x,y,7)
 		end
 	end
 end
 ]]
 
 -- current face
 local pos,angle,m=plyr:get_pos()
 local ground_pos
 current_face,ground_pos=find_face(pos,current_face)

	local out={}
	-- get visible voxels
	for k,_ in pairs(tiles) do
		--for k,_ in pairs(track.voxels) do
		local faces=track.voxels[k]
		if faces then
			for _,face in pairs(faces) do
				-- avoid overdraw for shared faces
				if v_dot(face.n,cam.pos)>face.cp and face.session!=sessionid then
					local z,outcode,verts=0,0,{}
					-- project vertices
					for _,vi in pairs(face.vi) do
						local a=v_cache(vi)
						z+=a[3]					
						outcode=bor(outcode,a[3]>0.25 and k_far or k_near)
						verts[#verts+1]=a
					end			
					-- mix of near/far verts?
					if band(outcode,1)==1 then
						-- mix of near+far vertices?
						if(band(outcode,0x9)==9) verts=z_poly_clip(0.25,verts) c=8
						local c=face.flags
						if(current_face==face) c=8 
						if(#verts>2) add(out,{key=64/z,c=c,v=verts})
					end
					face.session=sessionid	
				end
			end
		end 
	end
	
 	sort(out)
	for i=1,#out do
		local d=out[i]
		-- fillp(dither_pat[flr(mid(d.key*24,1,#dither_pat))])
		project_poly(d.v,d.c)
	end
	-- fillp()

	local px,py=cam:project2d(pos[1],pos[3])
	pset(px,py,9)
 
	local cpu=flr(1000*stat(1))/10
	cpu=cpu.." â–¤"..stat(0)
	print(cpu,2,3,5)
	print(cpu,2,2,7)

end

-->8
-- unpack data & models
local mem=0x000

-- unpack a list into an argument list
-- trick from: https://gist.github.com/josefnpat/bfe4aaa5bbb44f572cd0
function munpack(t, from, to)
 local from,to=from or 1,to or #t
 if(from<=to) return t[from], munpack(t, from+1, to)
end

-- w: number of bytes (1 or 2)
function unpack_int(w)
  	w=w or 1
	local i=w==1 and mpeek() or bor(shl(mpeek(),8),mpeek())
	return i
end
-- unpack 1 or 2 bytes
function unpack_variant()
	local h=mpeek()
	-- above 127?
	if band(h,0x80)>0 then
		h=bor(shl(band(h,0x7f),8),mpeek())
	end
	return h
end
-- unpack a float from 1 byte
function unpack_float(scale)
	local f=shr(unpack_int()-128,5)
	return f*(scale or 1)
end
-- unpack a double from 2 bytes
function unpack_double(scale)
	local f=(unpack_int(2)-16384)/128
	return f*(scale or 1)
end
-- unpack an array of bytes
function unpack_array(fn)
	local n=unpack_variant()
	printh("array#:"..n)
	for i=1,n do
		fn(i)
	end
end
-- valid chars for model names
local itoa='_0123456789abcdefghijklmnopqrstuvwxyz'
function unpack_string()
	local s=""
	unpack_array(function()
		local c=unpack_int()
		s=s..sub(itoa,c,c)
	end)
	return s
end

function unpack_models()
	-- for all models
	unpack_array(function()
		local model,name,scale={v={},f={},n={},cp={},voxels={}},unpack_string(),1/unpack_int()
		
		printh("name:"..name.." scale:"..scale)
		-- vertices
		unpack_array(function()
			local v={unpack_double(scale)+128,unpack_double(scale),unpack_double(scale)+128}
			add(model.v,v)
		end)
		
		-- faces
		unpack_array(function()
			local f={vi={},flags=unpack_int()}
			-- vertex indices
			-- quad?
			local n=band(f.flags,32)>0 and 4 or 3
			for i=1,n do
				add(f.vi,unpack_variant())
			end
			printh("vi: "..f.vi[1])
			add(model.f,f)
		end)

		-- normals + n.p cache
		for i=1,#model.f do
			local f=model.f[i]
			f.n={unpack_float(),unpack_float(),unpack_float()}
			-- printh("ni:"..i.." vi:"..f.vi[1])
			f.cp=v_dot(f.n,model.v[f.vi[1]])
		end

		-- voxels
		unpack_array(function()
			local id,faces=unpack_int(),{}
			unpack_array(function()
				local fi=unpack_variant()
				add(faces,model.f[fi])
			end)
			model.voxels[id]=faces
		end)
  		-- index by name
		all_models[name]=model
	end)
end

-- unpack multi-cart track
local cart_id=1
function mpeek()
	if mem==0x4300 then
		printh("switching cart: "..cart_id)
		reload(0,0,0x4300,"track_"..cart_id..".p8")
		cart_id += 1
		mem=0
	end
	local v=peek(mem)
	mem+=1
	return v
end

printh("-------------------------")
reload(0,0,0x4300,"track_0.p8")
unpack_models()
-- restore cart
reload()

-->8
-- trifill & clipping
-- by @p01
function p01_trapeze_h(l,r,lt,rt,y0,y1)
  lt,rt=(lt-l)/(y1-y0),(rt-r)/(y1-y0)
  if(y0<0)l,r,y0=l-y0*lt,r-y0*rt,0
   for y0=y0,min(y1,128) do
   rectfill(l,y0,r,y0)
   l+=lt
   r+=rt
  end
end
function p01_trapeze_w(t,b,tt,bt,x0,x1)
 tt,bt=(tt-t)/(x1-x0),(bt-b)/(x1-x0)
 if(x0<0)t,b,x0=t-x0*tt,b-x0*bt,0
 for x0=x0,min(x1,128) do
  rectfill(x0,t,x0,b)
  t+=tt
  b+=bt
 end
end

function trifill(x0,y0,x1,y1,x2,y2,col)
 color(col)
 if(y1<y0)x0,x1,y0,y1=x1,x0,y1,y0
 if(y2<y0)x0,x2,y0,y2=x2,x0,y2,y0
 if(y2<y1)x1,x2,y1,y2=x2,x1,y2,y1
 if max(x2,max(x1,x0))-min(x2,min(x1,x0)) > y2-y0 then
  col=x0+(x2-x0)/(y2-y0)*(y1-y0)
  p01_trapeze_h(x0,x0,x1,col,y0,y1)
  p01_trapeze_h(x1,col,x2,x2,y1,y2)
 else
  if(x1<x0)x0,x1,y0,y1=x1,x0,y1,y0
  if(x2<x0)x0,x2,y0,y2=x2,x0,y2,y0
  if(x2<x1)x1,x2,y1,y2=x2,x1,y2,y1
  col=y0+(y2-y0)/(x2-x0)*(x1-x0)
  p01_trapeze_w(y0,y0,y1,col,x0,x1)
  p01_trapeze_w(y1,col,y2,y2,x1,x2)
 end
end

-- clipping
function plane_poly_clip(n,v)
	local dist,allin={},0
	for i,a in pairs(v) do
		local d=n[4]-(a[1]*n[1]+a[2]*n[2]+a[3]*n[3])
		if(d>0) allin+=1
	 dist[i]=d
	end
 -- early exit
	if(allin==#v) return v
 if(allin==0) return {}

	local res={}
	local v0,d0,v1,d1,t,r=v[#v],dist[#v]
 -- use local closure
 local clip_line=function()
 	local r,t=make_v(v0,v1),d0/(d0-d1)
 	v_scale(r,t)
 	v_add(r,v0)
 	res[#res+1]=r
 end
	for i=1,#v do
		v1,d1=v[i],dist[i]
		if d1>0 then
			if(d0<=0) clip_line()
			res[#res+1]=v1
		elseif d0>0 then
   clip_line()
		end
		v0,d0=v1,d1
	end
	return res
end

function z_poly_clip(znear,v)
	local dist={}
	for i,a in pairs(v) do
		dist[#dist+1]=-znear+a[3]
	end

	local res={}
	local v0,d0,v1,d1,t,r=v[#v],dist[#v]
 -- use local closure
 local clip_line=function()
 	local r,t=make_v(v0,v1),d0/(d0-d1)
 	v_scale(r,t)
 	v_add(r,v0)
 	res[#res+1]=r
 end
	for i=1,#v do
		v1,d1=v[i],dist[i]
		if d1>0 then
			if(d0<=0) clip_line()
			res[#res+1]=v1
		elseif d0>0 then
   clip_line()
		end
		v0,d0=v1,d1
	end
	return res
end
__gfx__
1050f1d1c0e061102810e7086df7080d68088de7087df708fc97081f48083b68087d68081d68080d38083f98085b49088dd8088dd8082dd8089dd8081dc8084f
39085be8085bc9088d49082d49089db9081d49081d59084f89085bb9082dc9089d1a080de9084fd9085b9a086d8a080d3a087d2a081d3a088d7a082fea08ec0b
085d9a087dda08dc8a08fc8b08fe0b081f1a084b6b082d3b08dc0b084d3b08cc8a082b5a083bbb080d6b083d0c08ce1c08eceb089c9b08bccb081d8b08acfc08
6e8c089eca081b6c08cc6c08cc1c08fcdb088c6d082e2b08fafa080b6c084c2c087c6c084c2c086cac082cac089cbc08ac9c081ccd08fd4b08eaec086cfc087c
cc08fb1e08bd6b08da4d080cfc08db1d083cdc08fb2d084cae082d6e086d8b08ca7d08eb5d081cec08cbab089a9b08ba7d08ab2d086b6d08db1d08ab0d089bfe
088cde08dc8d086b9d086b8d08ab2d083b1d086bab086aab088a9d082b3d080b3d083b2f08db1f083c9b084a3d08caad08eaad082b2d08ba2d08fa8d089a2d08
7a9d08ea9d089a3f081b3f087b8b082a7d084a8d084a2d087a5b08c97b08f91d083a6d08f9fc08e90d083a2f08ba3d08995d08f90d08e94d08a9fe08d91f084a
1b08593b08991d0849dc0899ac0839cc0899de0859ea08198c08d8bc08392d0849ba08d8ec08d8bc0868fc08d87c08d86e0858ae08d86c08080c0808ac08784c
08787c08f7fb08083c08782e08d78a08882c08874a08387b0837cb0897eb08173c0887bb08a7dd0847f908e72b08c6db08179b08a66b08378d08b6b908972b08
36da08568b08a61b08c63d0836690837ea08b53b0836ca08567c0815dc08a51908e6da08c57a08e56a08e5c80896c908157a08551a08858a0855b908250a0885
0c0894780846b908841a08f42a08e45908c49b08142808f55908346908c4c90884f80874ca08233b0893e708b5090864690824a808245a08b257083597087568
08d3f808d3b80814b808830908d35808d3170805180893a80883580833080893e908525808430808f27908f1b608c4e608e4080803c70853c708631908a17708
a24708f2b708d2870823770892c708c2770833480811a808517608848608a40708c20708d2470803e708d0560874d608a2370872f60842370862460854b60832
a60892f60852c60822d608b22708808708a0d508b4760872a60892460862860812860802460872760882660850c608601608624608025608f1160872060840e5
0862160802d508f11608f1b50850e50802e50872550860850892a50812b50872a50802b50882f408802508626508326508224508c28508a28408c0d408920508
f24508b2d408922508520508032408015408634408539408a3440824a408a3030832950845e308e3340824d308d33208439208c25508a5a308f4930854e30894
4308c4830854f308942508f55308c4830865b30805a10854e108d30508465308b5230835730855f208851308256108c4f40876f20885d208d54308066308b531
0845c20836230856e208e5330806330856d408d6e408a6a20886b20836230896f008261108b5d408f6b208861308969208c6c40817920817f20817a208d60308
d68208170308171308d6e00807e00896d00877c408279208a7f20897920867f208578208a7820867030897030857c40867c40847a208f79208f7e00848e008e7
c40887a20838f208d71308180308d70108b8b20888130868030828920848230868c408c7c408a7c208e8b20888110829c408e7d208d82308b8e208395308f833
08a871080a410899d40818230889f208294308f8130889730849a308a97308494308e9b1087ae4085893084ad3080a5308e983084aa3089942086bf108fa3508
c8050888d308aa24085ae308f924080bd308aa7408aa24085aa208eb65081924080b6408ba03085c95085925086b84086bc4081b84086bc4080bf3083d7308cc
1608e9d508a9e408bb45082ce408cb8508bb25085bc5086ce5080c55081c8508bbb5087c74089d66083a3608bc66084cf508fb85084ef408fdb6087aa608ec36
08ac56085c0708aa4708ccc6089c27083da608fc4708bcd6088c16089eb7080b6708eaa7084db708ec27082d97085db708dca608de18082b18086d28080d1808
7d2808fcd7082f47080f68084b18ea52801020907280304010722050a0903230b06040325070c0a052e08090f072e00130807290a011f0320121b03032a0c041
1152d0e0f06172d07101e072f01191613271a1210132114131915251d061c17251d171d072619181c132d1f1a171329131b181523251c142723252d15172c181
e142325262f1d13281b102e1521232422272129252327242e1b2223292d2625232e102e2b2521312227272138292127222b2a2723282c2d29232b2e243a252f2
13720372f26382137272a22303326373c28232a24333235253f203a37253b363f2720323c3a332b3e37363322333f3c3528353a393728324b35372a3c3349332
24d3e3b332c3f3643452048393847204142483729334a484321444d32432346454a452c404847472c4d414047284a4947432d4f4441432a45405945215c474b4
721525d4c4727494e4b4322545f4d432940555e4528515b4957285a5251572b4e4359532a5c5452532e455d53552658595757265f5a585729535067532f5b5c5
a53235d5260652566575667256e5f565727506766632e596b5f5320626167652365666467236c6e556726676e64632c68696e532761607e652a636463772a6b6
c6367246e6d63732b65786c632e607f6d65217a63727721797b6a67237d6b72732974757b632d6f667b752e717277772e78797177227b7a77732870818479732
b7670828a752c7e777d772c7f787e77277a70858d732f7080808188732a7082808780858520838c7d708887208380848f7c772d7085808b8088832084808c808
08f73208580878086808b85208e80838088808f87208e808980848083872088808b808a808f8320898082908c808483208b80868084908a85208d808e808f808
697208d80809089808e87208f808a8088908693208090819082908983208a808490839088952085908d8086908c972085908d9080908d87208690889087908c9
3208d9089908190809320889083908a908795208f9085908c908b97208f9081a08d908597208c90879082a08b932081a084a089908d932087908a908e9082a52
087a08f908b9088a72087a080a081a08f97208b9082a08ba088a32080a083a084a081a32082a08e908da08ba52085a087a088a086a72085a089a080a087a7208
8a08ba08aa086a32089a08ca083a080a3208ba08da08fa08aa5208ea085a086a081b7208ea083b089a085a72086a08aa084b081b32083b085b08ca089a3208aa
08fa086b084b52088b08ea081b080b72088b082b083b08ea72081b084b08ab080b32082b08bb085b083b32084b086b08cb08ab5208fb088b080b087b7208fb08
9b082b088b72080b08ab080c087b32089b081c08bb082b3208ab08cb082c080c5208db08fb087b08eb7208db084c089b08fb72087b080c085c08eb32084c087c
081c089b32080c082c088c085c52089c08db08eb08ac72089c083c084c08db7208eb085c08bc08ac32083c086c087c084c32085c088c08cc08bc5208ec089c08
ac08fc7208ec080d083c089c7208ac08bc082d08fc32080d083d086c083c3208bc08cc084d082d52086d08ec08fc08dc72086d087d080d08ec7208fc082d081d
08dc32087d089d083d080d32082d084d08ad081d52085d086d08dc08cd72085d08dd087d086d7208dc081d088d08cd3208dd080e089d087d32081d08ad081e08
8d5208bd085d08cd082e7208bd083e08dd085d7208cd088d08ed082e32083e08fd080e08dd32088d081e087e08ed52089e08bd082e08ae72089e08ce083e08bd
72082e08ed084e08ae3208ce085e08fd083e3208ed087e086e084e52080f089e08ae088e72080f08be08ce089e7208ae084e08de088e3208be083f085e08ce32
084e086e08ee08de52084f080f088e08fe72084f081f08be080f72088e08de082f08fe32081f086f083f08be3208de08ee088f082f52089f084f08fe08af7208
9f085f081f084f7208fe082f08bf08af32085f08cf086f081f32082f088f087f08bf5208ff089f08af18007208ff1820085f089f7208af08bf18301800321820
185008cf085f3208bf087f187018305208df08ff180008ef7208df1810182008ff721800183018a008ef3218101840185018203218301870186018a05218e008
df08ef18807218e01801181008df7208ef18a01890188032180118b0184018103218a0186018c0189052184118e0188018d072184118f0180118e07218801890
186118d03218f0188118b0180132189018c018111861521821184118d01831721821185118f018417218d0186118b118313218511871188118f0321861181118
9118b15218d11821183118a17218d118e11851182172183118b1180218a13218e11822187118513018b11891180252184218d118a118c1721842185218e118d1
7218a1180218f118c13218521812182218e1301802189118f1521892184218c1183272189218b2185218427218c118f1186218323218b21872181218523018f1
189118625218d21892183218827218d218a218b21892721832186218e218823218a218c2187218b2301862189118e252181318d218821823721813183318a218
d272188218e21843182332183318f218c218a23018e218911843521873181318231803721873188318331813721823184318a31803321883185318f218333018
43189118a35218631873180318e372186318041883187372180318a3189318e332180418b3185318833018a3189118935218c3186318e318d37218c318f31804
18637218e31893181418d33218f3182418b31804301893189118145218a41834185418b47218a418c4184418347218541874186418b43218c418e41884184432
187418911894186452181518a418b41825721815184518c418a47218b418641855182532184518d418e418c4321864189418f418555218751815182518057218
7518351845181572182518551895180532183518b518d4184532185518f4186518955218e51875180518f57218e51816183518757218051895188518f5321816
18a518b51835321895186518c5188552184618e518f518d57218461806181618e57218f51885187618d5321806182618a5181632188518c5183618765218b618
4618d518c67218b61856180618467218d51876186618c6321856188618261806321876183618f6186652189618b618c618a67218961817185618b67218c61866
18d618a632181718471886185632186618f618e618d6521867189618a618777218671807181718967218a618d6182718773218071837184718173218d618e618
5718275218c71867187718d77218c71887180718677218771827180818d73218871828183718073218271857189718085218a718c718d718b77218a718e71887
18c77218d7180818f718b73218e71818182818873218081897184818f752187818a718b7188872187818a818e718a77218b718f718c818883218a81838181818
e73218f7184818e818c8521858187818881868721858189818a8187872188818c818b818683218981829183818a83218c818e818d818b85218f8185818681859
7218f818091898185872186818b8187918593218091819182918983218b818d81839187952184918f8185918b972184918c9180918f87218591879186918b932
18c9188918191809321879183918f91869521899184918b918a9721899181a18c918497218b9186918d918a932181a182a188918c932186918f918e918d95218
4a189918a9185a72184a180a181a18997218a918d9188a185a32180a18aa182a181a3218d918e9183a188a5218da184a185a18ea7218da186a180a184a72185a
188a187a18ea32186a189a18aa180a32188a183a18ba187a5218ca18da18ea182b7218ca18fa186a18da7218ea187a180b182b3218fa184b189a186a32187a18
ba185b180b52188b18ca182b181b72188b183b18fa18ca72182b180b18ab181b32183b18cb184b18fa32180b185b18eb18ab52186b188b181b187b72186b189b
183b188b72181b18ab181c187b32189b18bb18cb183b3218ab18eb18db181c5218fb186b187b180c7218fb183c189b186b72187b181c185c180c32183c186c18
bb189b32181c18db187c185c52188c18fb180c189c72188c182c183c18fb72180c185c184c189c32182c18ac186c183c32185c187c18bc184c5218dc188c189c
18ec7218dc18fc182c188c72189c184c180d18ec3218fc182d18ac182c32184c18bc184d180d52185d18dc18ec18cc72185d187d18fc18dc7218ec180d189d18
cc32187d181d182d18fc32180d184d183d189d5218cd185d18cc18dd7218cd186d187d185d7218cc189d188d18dd32186d18fd181d187d32189d183d180e188d
5218ad18cd18dd18bd7218ad18ed186d18cd7218dd188d183e18bd3218ed185e18fd186d32188d180e186e183e52188e18ad18bd189e72188e181e18ed18ad72
18bd183e182e189e32181e184e185e18ed32183e186e18ae182e52187e188e189e18ce72187e18ee181e188e72189e182e180f18ce3218ee181f184e181e3218
2e18ae183f180f52186f187e18ce18be72186f18de18ee187e7218ce180f18fe18be3218de189f181f18ee32180f183f182f18fe52184f186f18be185f72184f
187f18de186f7218be18fe188f185f32187f2800189f18de3218fe182f18af188f5218bf184f185f18cf7218bf18df187f184f72185f188f18ef18cf3218df18
ff2800187f32188f18af281018ef7218141874185418d352183418c318d318547218c31834184418f33218f318441884182430187418141891080a08080a0808
0a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a
08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08
080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a0808
0a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a
08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08
080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a0808
0a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a
08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08
080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a0808
0a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a
08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08
080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a0808
0a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a
08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08
080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a0808
0a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a
08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08
080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080808080a08080a08080a08080a08080808080a08080a08080a08080a0808
0a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a
08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08
080a08684030183018d018805030089f183008ef6040089f08ae084f08fe704008ae08bd085e080e412018da18d05140089f08cf08ef087f616008de08fe082f
084f087f089f8130081d08bd086d9130081d08cc087c2220182118713220182118da426018a018ba18b018da18d018ca52a11810182018301840185018601870
1880189018a018b018c018d018e018aa18ba086f087f088f08af08bf08cf08df08ef08ff180062c108dd08ed08fd080e081e082e083e084e085e086e087e088e
089e08ae08be08ce08de08ee08fe080f081f082f083f085f086f087f088f08af7211081e08ec08fc081d083d084d085d086d088d089d08ad08bd08cd08dd08ed
08fd080e8240081d08ac08cc08fc9220082c087ca220082c08db1320181218c1232018c11871336018f01801182118411851187143a018aa18ba18ca18da18ea
18f01801181118211831534018aa18e018c018ea73b0089c08bc08dc08ec080d082d083d085d087d08ad08cd8331081c082c083c084c085c086c087c088c089c
08ac08bc08cc08dc08ec08fc08ab08bb08fb080c9340082c08bb08db080ca32008db088bb320083b088b1430181218b2186234e0181218411851186118711881
189118a118b118c118d118e118f11802446018f01811183118411861188154b01840086e189008be18e018ea080f1831085f08af08ff6470081e086e088c08dc
082d087d08cd8480081c083c087b089b08ab08cb08eb08fb94e0080b081b082b083b084b085b086b087b088b089b08ab08bb08cb08dba46008ba08ca08ea080b
081b083bb420083b08eac420089a08ea153018b21853180325901832184218621882189218b218d218e2180335f01812182218321842185218621872188218a2
18c218b118d118e118f1180255401822183118d118817550089b083c084b08eb088c8520084b08fa956008ba08da08fa080b082b084ba5f0081a082a083a084a
085a086a087a088a089a08aa08ba08ca08da08ea08fac530089a084a08f9063018a3185318f326c018d218e218031823183318531873188318a318c318d318f3
36f0188218a218c218d218f218131823184318631873189318b318c318e318044650181318b318c218631872562018221872863008aa085a08fa9620085a080a
a660081a083a085a08c908e9080ab6d0081a082a084a08790889089908a908b908c908d908e908f9080ad63008a9085908f907401894184418e418f327411814
182418341844186418741884189418b418c418d418e4180518151825183518c318d318e318f337a018341854188418a418d418f41825184518e3180447901836
185418a418f41845189518b318e518049740081908b90869080ab7d008d808f808190829083908490859086908790889089908a908b9c780089808b808d808e8
0809082908390859d72008590809e72008b808090820183518e418201835188528c0182618051815183518551865188518a518b518d518f5180638f018161836
18461866188618051825184518551875189518a518c518e518f54830183618d618865830182718d61877a8400819082808c80878b840081908a808c808f8c821
08180828083808480858086808780888089808a808b808c808d808e808f8e7f70808e830081808b808681930182618d518852960182618461856187618f51806
391118461856186618761886189618a618b618c618d618e618f6180718171827185718775940181818c718681877692018b81868a9200828d7b9509637d7e687
c9b00828173747678797b7d7e70808d9e00818f60717274757677797a7c7e7f7e9300818c7771a401817182618c618763ab018e618f618071817183718471857
18671887189718b74a901818183718571877188718a718c718d718f76a3018b8185918097a3018a9185918f9bab014466496b4055573a5c3f5da61d5f5061626
36465666768696a6b6c6d6e6f607172737fa3027d6772b30181718b718674b011818182818381848185818681878188818a81887189718b718d718e718f71808
5bb01828184818681878189818b818c818e81809183918597b20184a18f98b50189aa0184a50f09b409141e1f0ab603282d22373e1cb902444647494b4c4e405
db81c4d4e4f405152535455565758595a5b5c5d5e5f506162636fb4036d6e5863c3018b7185818085cb01878188818a818c818d818e818f81819182918391849
6cf018191829183918491859186918791889189918a918b918c918d918e918f97cb0182a30184a50185a187a189a18b918d918f9180a8c20189a187aac801232
426282c1e1f1bcc042628292b2d2e20323335373cc71e2f21333435363738393a3b3c3d3e3f304142434445464dc902434547484a4c4d4f4ec309545f4fc2095
e53d2018a818584d3018a8184918f87dd010203040181a183a185a186a188a18b918c918e9180a8d31102030405060708090a0b0c0d0e0f0186a185a187a188a
9df0b0c0d0e0f001112131415161718191ade012225161718191a1b1c1d1e1f102bdc02242527292a2c2e2f213f102dd20b304ed40a454f4045e20189918496e
301899183a18e9be202272ce4013c26372de20b3637f30183a40188a8f309040e09f3031e081af20d181bf2022d1000000000000000000000000000000000000
