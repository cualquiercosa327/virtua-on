pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
-- vector & tools
function make_v(a,b)
	return {
		b[1]-a[1],
		b[2]-a[2],
		b[3]-a[3]}
end
function v_clone(v)
	return {v[1],v[2],v[3]}
end
function v_dot(a,b)
	return a[1]*b[1]+a[2]*b[2]+a[3]*b[3]
end
function v_scale(v,scale)
	v[1]*=scale
	v[2]*=scale
	v[3]*=scale
end
function v_add(v,dv,scale)
	scale=scale or 1
	v[1]+=scale*dv[1]
	v[2]+=scale*dv[2]
	v[3]+=scale*dv[3]
end
function v_min(a,b)
	return {min(a[1],b[1]),min(a[2],b[2]),min(a[3],b[3])}
end
function v_max(a,b)
	return {max(a[1],b[1]),max(a[2],b[2]),max(a[3],b[3])}
end

local v_up={0,1,0}

-- matrix functions
function m_x_v(m,v)
	local x,y,z=v[1],v[2],v[3]
	v[1],v[2],v[3]=m[1]*x+m[5]*y+m[9]*z+m[13],m[2]*x+m[6]*y+m[10]*z+m[14],m[3]*x+m[7]*y+m[11]*z+m[15]
end

function make_m_from_euler(x,y,z)
		local a,b = cos(x),-sin(x)
		local c,d = cos(y),-sin(y)
		local e,f = cos(z),-sin(z)
  
  -- yxz order
  local ce,cf,de,df=c*e,c*f,d*e,d*f
	 return {
	  ce+df*b,a*f,cf*b-de,0,
	  de*b-cf,a*e,df+ce*b,0,
	  a*d,-b,a*c,0,
	  0,0,0,1}
end
-- only invert 3x3 part
function m_inv(m)
	m[2],m[5]=m[5],m[2]
	m[3],m[9]=m[9],m[3]
	m[7],m[10]=m[10],m[7]
end
function m_set_pos(m,v)
	m[13],m[14],m[15]=v[1],v[2],v[3]
end
-- returns basis vectors from matrix
function m_right(m)
	return {m[1],m[2],m[3]}
end
function m_up(m)
	return {m[5],m[6],m[7]}
end
function m_fwd(m)
	return {m[9],m[10],m[11]}
end

-- bbox
local one_if=function(cond)
	return cond>0 and 1 or 0
end
function make_bbox(width)
	local vmin,vmax={0,0,0},{width,width,2*width}
	local size=make_v(vmin,vmax)
	-- generate vertices
	local v={}
	for i=0,7 do
		local v1={
			one_if(band(0x2,i))*size[1],
			one_if(band(0x4,i))*size[2],
			one_if(band(0x1,i))*size[3],
		}
		v_add(v1,vmin)
		add(v,v1)
	end
	
	return v
end

function make_plane(width)
	return {
		{0,0,0},
		{width,0,0},
		{width,0,width},
		{0,0,width}
	}
end

-- sort
-- https://github.com/morgan3d/misc/tree/master/p8sort
function sort(data)
 local n = #data 
 if(n<2) return
 
 -- form a max heap
 for i = flr(n / 2) + 1, 1, -1 do
  -- m is the index of the max child
  local parent, value, m = i, data[i], i + i
  local key = value.key 
  
  while m <= n do
   -- find the max child
   if ((m < n) and (data[m + 1].key > data[m].key)) m += 1
   local mval = data[m]
   if (key > mval.key) break
   data[parent] = mval
   parent = m
   m += m
  end
  data[parent] = value
 end 

 -- read out the values,
 -- restoring the heap property
 -- after each step
 for i = n, 2, -1 do
  -- swap root with last
  local value = data[i]
  data[i], data[1] = data[1], value

  -- restore the heap
  local parent, terminate, m = 1, i - 1, 2
  local key = value.key 
  
  while m <= terminate do
   local mval = data[m]
   local mkey = mval.key
   if (m < terminate) and (data[m + 1].key > mkey) then
    m += 1
    mval = data[m]
    mkey = mval.key
   end
   if (key > mkey) break
   data[parent] = mval
   parent = m
   m += m
  end  
  
  data[parent] = value
 end
end

-->8
-- main engine
local angles={}
function make_cam(x0,y0,focal)
	local angle=0
	for i=0,127 do
		add(angles,atan2(64,i-64))
	end
	return {
		pos={0,0,0},
		track=function(self,pos,a,m)
   self.pos=v_clone(pos)
   -- v_scale(self.pos,1/8)
   -- height
   self.pos[2]+=10
			angle=a
			-- inverse view matrix
   m_inv(m)
   self.m=m
  end,
	 project2d=function(self,x,y)
	 	return x*8,128-y*8
	 end,
	 project=function(self,v)
	  -- view to screen
   local w=focal/v[3]
   return x0+ceil(v[1]*w),y0-ceil(v[2]*w),w
	 end,
	 visible_tiles=function(self)
  	local x,y=self.pos[1]/16,self.pos[3]/16
   local x0,y0=flr(x),flr(y)
   local tiles={
    [x0+16*y0]=true
   } 
   
   for i=1,128 do
   	
   	local a=angles[i]+angle
   	local v,u=cos(a),-sin(a)
   	
    local mapx,mapy=x0,y0
   
    local ddx,ddy=abs(1/u),abs(1/v)
    local mapdx,distx
    if u<0 then
    	mapdx=-1
     distx=(x-mapx)*ddx
    else
    	mapdx=1
     distx=(mapx+1-x)*ddx
    end
   	local mapdy,disty
    if v<0 then
    	mapdy=-1
     disty=(y-mapy)*ddy
    else
    	mapdy=1
     disty=(mapy+1-y)*ddy
    end	
    for dist=0,3 do
   		if distx<disty then
   			distx+=ddx
   			mapx+=mapdx
   		else
   			disty+=ddy
   			mapy+=mapdy
   		end
   		-- non solid visible tiles
   		if mapx>=0 and mapy>=0 and mapx<16 and mapy<16 then
   			tiles[mapx+16*mapy]=true
   		end
   	end				
  	end	
  	return tiles
	 end
	}
end

function make_plyr(p)
	local pos,angle,m=v_clone(p),0
	local velocity=0
	return {
	 get_pos=function()
	 	return pos,angle,m
	 end,
		handle_input=function()
  	local dx,dy=0,0
  	if(btn(2)) dx=1
  	if(btn(3)) dx=-1
  	if(btn(0)) dy=-1
  	if(btn(1)) dy=1
  	
  	angle+=dy/64
  	velocity+=dx
		end,
		update=function()
  	velocity*=0.8

			-- update orientation matrix
			m=make_m_from_euler(0,angle,0)
			v_add(pos,m_fwd(m),velocity/8)
			m=make_m_from_euler(0.1,angle,0)
		end
	}
end

local cam=make_cam(63.5,63.5,63.5)
local plyr=make_plyr({64,0,96})
local bbox=make_bbox(1)
local plane=make_plane(16)
local all_models={}

local track

function project_poly(p,c)
	if #p>2 then
		local x0,y0=cam:project(p[1])
    local x1,y1=cam:project(p[2])
		for i=3,#p do
			local x2,y2=cam:project(p[i])
			trifill(x0,y0,x1,y1,x2,y2,c)
		  x1,y1=x2,y2
		end
	end
end

function is_inside(p,f)
	local vi=f.vi
	local inside,p0=0,track.v[vi[#vi]]
	for i=1,#vi do
		local p1=track.v[vi[i]]
		if((p0[3]-p1[3])*(p[1]-p0[1])+(p1[1]-p0[1])*(p[3]-p0[3])>0) inside+=1
		p0=p1
	end
	if(inside==#vi) return f
end
function find_face(p,oldf)
	-- same face as previous hit
	if(oldf and is_inside(p,oldf)) return oldf
	-- voxel?
	local x,z=flr(p[1]/16),flr(p[3]/16)
	local faces=track.voxels[x+16*z]
	if faces then
		for _,f in pairs(faces) do
			if(f!=oldf and is_inside(p,f)) return f
		end
	end
	-- not found
end

function _init()
	track=all_models["track"]	
end

function _update()
	plyr:handle_input()
	
	plyr:update()
	
	cam:track(plyr:get_pos())
end

local sessionid=0
local k_far=1
local k_near=8
local current_face

function _draw()
	sessionid+=1
 cls()

 local p={}
 -- model to
 local function v_cache(k)
  local a=p[k]
  if not a then
   -- world to cam
			a=make_v(cam.pos,track.v[k])
   m_x_v(cam.m,a)

			-- outcode
		 a.outcode=a[3]>0.25 and k_far or k_near
   p[k]=a
  end
  return a
 end
 
 local tiles=cam:visible_tiles()

 --[[
 for k,_ in pairs(tiles) do
	 local i,j=k%16,flr(k/16)
 	local offset={16*i,0,16*j}
 	local p0=v_clone(plane[4])
 	v_add(p0,offset)
 	v_add(p0,cam.pos,-1)
	 m_x_v(cam.m,p0)
 	local x0,y0,w0=cam:project(p0)
  for k=1,4 do
 	 local p1=v_clone(plane[k])
 	 v_add(p1,offset)
 	 v_add(p1,cam.pos,-1)
	  m_x_v(cam.m,p1)
 		local x1,y1,w1=cam:project(p1)
 		if w0>0 and w1>0 then
 			line(x0,y0,x1,y1,11)
 		end
 		x0,y0,w0=x1,y1,w1
 	end
 end
 ]]
 
 --[[
 local scale=1
 local x0,z0=cam.pos[1],cam.pos[3]
 local dx,dy=x0%scale,z0%scale

 for i=-8,8 do
 	local ii=scale*i-dx+x0
 	for j=-8,8 do
 		local jj=scale*j-dy+z0
 		local v={ii,0,jj}
 		v_add(v,cam.pos,-1)
   m_x_v(cam.m,v)
 		local x,y,w=cam:project(v)
			if w>0 then
 			pset(x,y,7)
 		end
 	end
 end
 ]]
 
 -- current face
 local pos,angle,m=plyr:get_pos()
 current_face=find_face(pos,current_face)

	local out={}
	-- get visible voxels
	for k,_ in pairs(tiles) do
		--for k,_ in pairs(track.voxels) do
		local faces=track.voxels[k]
		if faces then
			for _,face in pairs(faces) do
				-- avoid overdraw for shared faces
				if v_dot(face.n,cam.pos)>face.cp and face.session!=sessionid then
					local z,outcode,verts=0,0,{}
					-- project vertices
					for _,vi in pairs(face.vi) do
						local a=v_cache(vi)
						z+=a[3]
						outcode=bor(outcode,a.outcode)
						verts[#verts+1]=a
					end			
					-- mix of far verts?
					if band(outcode,1)==1 then
						-- mix of near+far vertices?
						if(band(outcode,0x9)==9) verts=z_poly_clip(0.25,verts) c=8
						local c=face.flags
						if(current_face==face) c=8 
						if(#verts>2) add(out,{key=64/z,c=c,v=verts})
					end
					face.session=sessionid	
				end
			end
		end 
	end
	
 sort(out)
	for i=1,#out do
		local d=out[i]
		project_poly(d.v,d.c)
	end
	
	local px,py=cam:project2d(pos[1],pos[3])
	pset(px,py,9)
 
	local cpu=flr(1000*stat(1))/10
	cpu=cpu.." â–¤"..stat(0)
	print(cpu,2,3,5)
	print(cpu,2,2,7)
end

-->8
-- unpack data & models
local mem=0x000

-- unpack a list into an argument list
-- trick from: https://gist.github.com/josefnpat/bfe4aaa5bbb44f572cd0
function munpack(t, from, to)
 local from,to=from or 1,to or #t
 if(from<=to) return t[from], munpack(t, from+1, to)
end

-- w: number of bytes (1 or 2)
function unpack_int(w)
  w=w or 1
	local i=w==1 and peek(mem) or bor(shl(peek(mem),8),peek(mem+1))
	mem+=w
	return i
end
-- unpack 1 or 2 bytes
function unpack_variant()
	local i=peek(mem)
	mem+=1
	-- above 127?
	if band(i,0x80)>0 then
		i=bor(shl(band(i,0x7f),8),peek(mem))
		mem+=1
	end
	return i
end
-- unpack a float from 1 byte
function unpack_float(scale)
	local f=shr(unpack_int()-128,5)
	return f*(scale or 1)
end
-- unpack an array of bytes
function unpack_array(fn)
	for i=1,unpack_variant() do
		fn(i)
	end
end
-- valid chars for model names
local itoa='_0123456789abcdefghijklmnopqrstuvwxyz'
function unpack_string()
	local s=""
	unpack_array(function()
		local c=unpack_int()
		s=s..sub(itoa,c,c)
	end)
	return s
end

function unpack_models()
	-- for all models
	unpack_array(function()
		local model,name,scale={v={},f={},n={},cp={},voxels={}},unpack_string(),1/unpack_int()
		
		-- vertices
		unpack_array(function()
			add(model.v,{unpack_int(),unpack_int()-128,unpack_int()})
		end)
  
		-- faces
		unpack_array(function()
			local f={vi={},flags=unpack_int()}
			-- vertex indices
			-- quad?
			local n=band(f.flags,32)>0 and 4 or 3
			for i=1,n do
				add(f.vi,unpack_variant())
			end
			add(model.f,f)
		end)

		-- normals + n.p cache
		for i=1,#model.f do
			local f=model.f[i]
			f.n={unpack_float(),unpack_float(),unpack_float()}
			f.cp=v_dot(f.n,model.v[f.vi[1]])
		end

		-- voxels
		unpack_array(function()
			local id,faces=unpack_int(),{}
			unpack_array(function()
			local fi=unpack_variant()
				add(faces,model.f[fi])
			end)
			model.voxels[id]=faces
		end)
  		-- index by name
		all_models[name]=model
	end)
end

-- unpack models
unpack_models()

-->8
-- trifill & clipping
-- by @p01
function p01_trapeze_h(l,r,lt,rt,y0,y1)
  lt,rt=(lt-l)/(y1-y0),(rt-r)/(y1-y0)
  if(y0<0)l,r,y0=l-y0*lt,r-y0*rt,0
   for y0=y0,min(y1,128) do
   rectfill(l,y0,r,y0)
   l+=lt
   r+=rt
  end
end
function p01_trapeze_w(t,b,tt,bt,x0,x1)
 tt,bt=(tt-t)/(x1-x0),(bt-b)/(x1-x0)
 if(x0<0)t,b,x0=t-x0*tt,b-x0*bt,0
 for x0=x0,min(x1,128) do
  rectfill(x0,t,x0,b)
  t+=tt
  b+=bt
 end
end

function trifill(x0,y0,x1,y1,x2,y2,col)
 color(col)
 if(y1<y0)x0,x1,y0,y1=x1,x0,y1,y0
 if(y2<y0)x0,x2,y0,y2=x2,x0,y2,y0
 if(y2<y1)x1,x2,y1,y2=x2,x1,y2,y1
 if max(x2,max(x1,x0))-min(x2,min(x1,x0)) > y2-y0 then
  col=x0+(x2-x0)/(y2-y0)*(y1-y0)
  p01_trapeze_h(x0,x0,x1,col,y0,y1)
  p01_trapeze_h(x1,col,x2,x2,y1,y2)
 else
  if(x1<x0)x0,x1,y0,y1=x1,x0,y1,y0
  if(x2<x0)x0,x2,y0,y2=x2,x0,y2,y0
  if(x2<x1)x1,x2,y1,y2=x2,x1,y2,y1
  col=y0+(y2-y0)/(x2-x0)*(x1-x0)
  p01_trapeze_w(y0,y0,y1,col,x0,x1)
  p01_trapeze_w(y1,col,y2,y2,x1,x2)
 end
end

-- clipping
function plane_poly_clip(n,v)
	local dist,allin={},0
	for i,a in pairs(v) do
		local d=n[4]-(a[1]*n[1]+a[2]*n[2]+a[3]*n[3])
		if(d>0) allin+=1
	 dist[i]=d
	end
 -- early exit
	if(allin==#v) return v
 if(allin==0) return {}

	local res={}
	local v0,d0,v1,d1,t,r=v[#v],dist[#v]
 -- use local closure
 local clip_line=function()
 	local r,t=make_v(v0,v1),d0/(d0-d1)
 	v_scale(r,t)
 	v_add(r,v0)
 	res[#res+1]=r
 end
	for i=1,#v do
		v1,d1=v[i],dist[i]
		if d1>0 then
			if(d0<=0) clip_line()
			res[#res+1]=v1
		elseif d0>0 then
   clip_line()
		end
		v0,d0=v1,d1
	end
	return res
end

function z_poly_clip(znear,v)
	local dist={}
	for i,a in pairs(v) do
		dist[#dist+1]=-znear+a[3]
	end

	local res={}
	local v0,d0,v1,d1,t,r=v[#v],dist[#v]
 -- use local closure
 local clip_line=function()
 	local r,t=make_v(v0,v1),d0/(d0-d1)
 	v_scale(r,t)
 	v_add(r,v0)
 	res[#res+1]=r
 end
	for i=1,#v do
		v1,d1=v[i],dist[i]
		if d1>0 then
			if(d0<=0) clip_line()
			res[#res+1]=v1
		elseif d0>0 then
   clip_line()
		end
		v0,d0=v1,d1
	end
	return res
end
__gfx__
1050f1d1c0e061101837d968720a68a26a68139a68437978d2c978f23a78437a7863597823a978531a78b35a78d37988a3e988f31a88243988735988c3998844
b988843988c33988543988944888734888c3588854588894d78873f788d32888545888940778f38788340888744888a41778946788a4f788b43888b437783577
78150878e44878c48778a5c778752878055878d4e778064878c5b87865e878450878166868f5e868e53968d5086826586846d86876196896f768262868767868
e6986827d75826d75886e75817e75857873826773876573807473847372806071856c618d6a61817e618d5b608165608862608b6c618a57608d5060826c50846
3608c4f5080585086555f7a565f75455f7a425f73515f77594e764b4e7b4e4e73505e77504d7c444d705a4e765d4e795a3d745f3d76564d7b5a4d7d573d7c5c3
d7d554d7e594d7f573d776c3d77654d76694d75693d707e3d7e674d7c6b4d7a6c3f7a724f797b4f787f4f777d3f7c72408d7a408f7e40818a30818e308387408
78a408985318c8a318d824180964281943287993286924285964284993382ad338f94438a9843879c4482bf448ea35486a55482a45385b55380b85388a95383a
b5386bb5381bb5388ac5384a26286b16281b06288af5283a86284b7628fa46287a36283a0728cae6283ae628f937281b3728ca57283a5728e96728caa7284ac7
280a8728eaf7288a28285a97280b2828da6828baa7282b38282b78281b5728cba728cb3828ab78289b77284cc7282c4828eba728ace7286c58280c8828db0828
ec2828ac78282c78281d8828cca8283cb828fb69281d5928cc49283c4928fbe928fcc928ac89282c7928eb6a38ac2a387cc9380c9938dbba481c6a480ce948db
a948bb8a587bf9585bb9584bda587b9a584b1a58fad958daba682b6a68ba3a687a7b781b5b78ca0b785ada781aeb88caab888a4b882a0b88f93c885aeb883a6b
88f92b88d96c88c91c88a98b88894b88797c88292c88299b88295b88297c78981c78a89b78b84b78c84c68f7fb68187b68382b6848fb48a69b48b60b48d6ca48
d6fb4886ab48661b4846da48264c5806fb58d59b58855b5865ac68455c6825db68f49b68e4dc78548c7854fb7864ab7864ac88935c88a3cb88d38b88e34c88d2
0c88038b88434b88730c7872cb78a25b78032b78438b78126b78623b78e21b7823da6802ea6852fa68e20b68234a68226a6872aa68e2ba68330608f645f70615
e7e5e4e706e4e75635f737aa78b36a78644b78642b78a3fa7883da7883fa5835ea78e39968166a48a6d8d8a70738c7c8287be828ab3938ab59387b9948baa828
aa09289b6a78d9ca88a9fa7819aa6868650868e42819e428799538e9e528d9c628792828b9b978c16d68755d98438c78d10b78411988523d68284d68e65c78bb
0d88da5d889967289d5818fd2a38dd5b48dc7218f8f238cad4382cd5288ca628bce418a363d744a2c77592d7d68208d79888a2d788f2d6885395b89197c8d079
b8407dc8110fb8e4ee98587ea8cb3c586e6858cfe548ee73486dc03879d00886e1084318ee72501020605230706020724080703072a0d0019052b0e0d0a072c0
f0e0b070d0110152e02111d072f03121e070114101522151411172316151217281c1b1715291d1c18172a1e1d19172024232f152125242027222625212724282
723252529282427262a292527282c2b2725292d2c28272a2e2d29272034333f252135343037223635313724383733352539383437263a393535293d3c38372a3
e3d39372c304f3b352d31404c372e32414d372044434f352145444047224645414724484743452549484447264a494547284c4b4745294d4c48472a4e4d49472
c405f4b452d41505c472e42515d472054535f452155545057225655515724585753552559585457265a595557285c5b5755295d5c58572a5e5d59572c506f5b5
52d51606c572e52616d572064636f552165646067226665616724686763652569686467266a696567286c6b6765296d6c68672a6e6d69672c607f6b652d61707
c672e62717d6724787773752579787477267a797577287c7b7775297d7c78772a7e7d79772c70808f7b752d708180808c772e708280818d772080808480838f7
52081808580848080872082808680858081872084808880878083852085808980888084872086808a8089808587208c8080908f808b85208d80819080908c872
08e80829081908d87208090849083908f852081908590849080972082908690859081972084908890879083952085908990889084972086908a9089908597208
8908c908b9087952089908d908c908897208a908e908d908997008f9083a082a52080a084a083a08f972081a085a084a080a70083a086a082a52084a087a086a
083a72085a088a087a084a70086a089a082a52087a08aa089a086a72088a08ba08aa087a70089a08ca082a5208aa08da08ca089a7208ba08ea08da08aa7008ca
08fa082a5208da080b08fa08ca7208ea081b080b08da72083b087b086b082b52084b088b087b083b72085b08cb088b084b72087b08ab089b086b52088b08bb08
ab087b7008cb08bb088b7208ab08eb08db089b5208bb08fb08eb08ab7008cb08fb08bb7208eb081c080c08db5208fb082c081c08eb7208cb083c082c08fb7208
5c089c088c084c52086c08ac089c085c72087c08bc08ac086c72089c08dc08cc088c5208ac08ec08dc089c7208bc08fc08ec08ac7208dc081d080d08cc5208ec
082d081d08dc7208fc083d082d08ec72081d084d087d080d52082d085d084d081d72083d086d085d082d70084d088d087d52085d089d088d084d72086d08ad08
9d085d70088d08bd087d52089d08cd08bd088d7208ad08dd08cd089d7208fd083e082e08ed52080e084e083e08fd72081e085e084e080e72083e087e086e082e
52084e088e087e083e72085e089e088e084e72087e08be08ae086e52088e08ce08be087e72089e08de08ce088e7208be08fe08ee08ae5208ce080f08fe08be72
08de081f080f08ce7208fe083f082f08ee52080f084f083f08fe72081f085f084f080f72083f087f086f082f52084f088f087f083f72085f089f088f084f7208
bf08ff08ef08af5208cf180008ff08bf7208df1810180008cf7208ff1830182008ef5218001840183008ff72181018501840180072187018b018a01860521880
18c018b0187072189018d018c018807218b018f018e018a05218c0180118f018b07218d01811180118c072183118711861182152184118811871183172185118
911881184172187118b118a1186152188118c118b1187172189118d118c118817218b118f118e118a15218c1180218f118b17218d11812180218c17218f11832
182218e15218021842183218f17218121852184218027230184218524052201832184230721018221832207208d908e9081a080a5208c908d9080a08f97208b9
08c908f9082a72080b081b085b084b5208fa080b084b083b72082a08fa083b082b52081c082c086c085c72080c081c085c084c72082c083c087c086c72087d08
bd08fd08ed5208bd08cd080e08fd7208cd08dd081e080e72086f087f08bf08af52087f088f08cf08bf72088f089f08df08cf7218401850189018805218301840
188018707218201830187018607218e018f0183118215218f0180118411831721801181118511841526070b0a0727080c0b0725060a0905241519181725161a1
91720141817172089808a808e808d8520888089808d808c8720878088808c808b87217276757520717574772f607473772b2c203f252c2d2130372d2e2231352
c1d1120272d1e1221272b1c102f132e1a2622232a1e2a2e1326123e2a1302718b26730e618a227302718a218b230a618a2e630661892a630a6189218a2302618
926630e518822630261882189230a51882e530651872a530a518721882302518726530e418622530251862187232187218a2189218823218a21872186218b232
3163236130c018d2f0308018c2c030c018c218d2304018c2803040185218133040181318c2301812181318523018d11803181230181218031813301891180318
d130185118f2189130189118f2180330181118f218513018d018e2181130181118e218f230189018e218d030185018231890301890182318e230180318331813
3018f2183318033018e2183318f23018c2181318333018c2183318d23018d2183318e23018d218e2182330f018d2313031184363303118d21843301810182318
503008df18531810301810185318233218d218231853184330631843a330a31863e330a31843186330e3186324302418736430241863187330641873a430a418
62e430a41873186230081b1883085b3008ea18d3081b30081b18d3188330085b188308cb3008cb1893083c30083c1893087c30087c18a308bc30087c189318a3
3008bc18a308fc3008fc18b3083d3008fc18a318b330083d18b3086d30086d18c308ad30086d18b318c33018621873183430189318e318a33018a318e318b330
188318b318e332089f1824185308df30085f1824089f30081f1814085f30085f181418243008de1814081f30089e180408de3008de1804181430085e1804089e
30081e18f3085e30085e18f318043008dd18f3081e3008ad18c308dd3008dd18c318f3301853186318433008e91884081a3008a9187408e93008e91874188430
082918640869300869187408a9300869186418743008e8186408293008a8185408e83008e818541864300868185408a8300828184408683008681844185430e7
1844082830a71834e730e71834184430081a1884085a30085a1894088a30085a1884189430088a189408ba3008ba18d308ea3008ba189418d3326718b21834a7
32184418741864185430183418741844301862183418b230187318841834301894187318633018c3189418f330186318f31894321814180418f31824303373b3
32f233b3f330f2f33430b2f23430b23474323272f43532f17518e5185630b1f118563071b1184630b118561846300171184630011846183630900118f4300118
3618f430509018f430105018a4305018f418a4301018a418223018e1182218e430182218a418e43018a118e118e430186118a118d43018a118e418d430182118
6118d43018e0182118c430182118d418c43018a018e018c430186018a018b43018a018c418b4301820186018b43008ef1820181530182018b418153008af08ef
181530086f08af18053008af1815180530082f086f18053008ee082f184530082f180518453008ae08ee184530086e08ae18353008ae1845183530082e086e18
353008ed082e182530082e1835182530087d08ed182530080d087d18853008cc080d188530088c08cc18753008cc1885187530084c088c187530080c084c1865
30084c187518653008db080c186530089b08db18553008db1865185530086b089b185530082b086b18d530086b185518d530082a082b18d53008b9082a18d530
087908b918c53008b918d518c5300839087918c53008f8083918b530083918c518b53008b808f818b530087808b818a53008b818b518a5300838087818a530f7
0838189530083818a5189530b7f718953077b7182630b718951826303777182630f637181630371826181630b6f618163076b6180630b6181618063075b518e5
30b5f518f530b518f518e530f53618f530367618063036180618f530188318e318933008cb1883189330087d18251885301875188518d6301865187518e63018
7518d618e630182518d61885301825183518c630182518c618d6301835184518c630180518b6184530184518b618c6301805181518b63018b418a61815301815
18a618b63018b418c418a63018c418d418963018c4189618a63018a4188618e43018d418e418963018e4188618963018f4183618763018a418f418863018f418
76188630183618461876301846185618663018461866187630185518f618d5301855186518e630185518e618f63018c518d518f63018b518c518073018c518f6
18073018a518b5180730189518a518173018a518071817301816182618273018951817182630182618171827301806181618273018f518061837301806182718
373018e518f518373018e5186618563018e51837186630f1357530f1323530b274b43072b4f43072b2b4301863182418f3301853182418633018941884187330
18c318d31894301834188418743218b3188318d318c3727383c3b3280ac748f9c758f99738f9b748f9b7380ab7080a08080a08080a08080a08080a08080a0808
0a08080a08080a08b70a08080a08080a08d70a2818f96838d9d8080a08080a08080a08480a48280a58180a3838f968080a08080a08080a08080a0887f928c70a
28d70a1857e9f787f90897f9f787f90897f9e7a7f9e787f928c70ae7d70ae7c7f948080a08080a08d70a18080a08c70a18e70af7d70ae7c70a28d70a08b70a08
47e918d70a28d70a08080a08080a08d70a18d70a58080a08080a08080a08080a08080a08080a08080a08080a08080a08d70ab708f9a7080ac7e70ac7080a0808
0a08180ad7180ad7e7f9a7080ad7180ac7c70ac7f70ad7f70ac7d7f9a7480a28580a2868f928080a08080a08080a08580a0868f90888f908080a08080a08080a
08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08
080a08080a08080a08080a08080a08080a08080a08080a08080a08d70a28b7f93887f958f70a38d70a48a7e988080a38f70a48e70a48080a08080a08080a08a7
e998b7f958d70a38c70a28c70a48b7f958080a08080a08080a08080a08080a08080a08080a08080a08080a08080ac7080ac7f70ab7f70ad7f70ac7f70ac7080a
08080a08080a08f70a38f70a28f70a28080a28080a38080a48080a38180a38080a48d70ac7d70ac7b7f9b7080a08080a08080a08d70a08b70af747e9f7080a08
080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08080a08e70a48e70a28e70a28f70ad7f70ad7080ad7f70a38f7
0a28f70a28080a08080a08080a08080a08080a08080a08080a08080a08080a08f70af7f70af7f70af7e70ab7f70ab7f7f9b7080a08080a08080a08080a08080a
08e70af7d8a9d887e988f70a48c70ac7a7f93877f918a7f908a7f9d7a7f90877f918080a08080a08967938080a0847d948c70af7080a08b70a28b7f9e7d70a08
080a3878f9f7080a08080a0898e9a7d7f9b7c70ac7f7f9a7a66997080ab7080a0827d908080a0887f958080a48a7f918080a48e70a38f70a58080a08080a0808
0a08080a08080a08080a08080a58480a48e70a28380a38f70a28080a08380a28380a38080a081789272799279799e6a7f9d767b937b7f9d7d70af7e70ab7080a
08080a08080a08080a08080a08080a0828f968a7f97897c9e847c988080a0877f93897f9e757e9f7c70ae7a7d94787e9a7d7f978080ad7f70ac7c7f9c7e70ae7
b70af7080a08e70ac7080a08b7f988c70a38e70a3897f9e7a7f91888f9b7080a08080a08080a08080a08a8e9e768f9d788f90858e97718f99758d937080a0808
0a0808f987080a08e7f997080a08080a08080a08080a08080a08080a08080ae7180ac7380ac7d70af7d70a1867e978b70a38b7e998c70ad70879795799296789
3937a9d857b9d817c968a7e988080a38080a08080a08080a08080a08c8e9f7080a08380a1878f928480a18280a38180a38180a38d70a28080a08080a08c70ad7
e70a18f70ae7e70a38f70a28e70a38f70a28c70a28e70a08d70a08180ad7d70a08180ad7280ac7180ad7080a08080a08080a08080a08e70a38080a28d7f958d7
0a38d70a28b70af7e70a08f70ae7080a28e70a08f70a28080a08280a18080a08080a08080a08080a08080a08080a08080a08580a18080a08180a28380a28f70a
f7e70a28e70ae7f70ad7f70ae7f70ad718f9a7080ae7180af718f99718f9a7080a08e70a08f70af7e7f978e70a28e7f978080a08e70af7e70a08080a08080a08
d70a38e70a08e70ac7f70ad7b70a18d70a08d70a18e70af7d70ae7e70af7c70a08a7f9f7b70a18b7f93877f928b70a28280a58d7f998d7e9c8280a3878f94828
0a38180a48180a38080a48280af748f9c7080ad7080ae7280a08180ae7180af7280ad7180af748f9a7280ae7280ae7480af7280a3858f928e7f988a7f978e7f9
9897e99827d91837b9c827b99827b9a888f90898f9d7080a18c70a28f70ae7c70a18080a08d7704018bc18dc18ec180d904018ac18cc18dc188c5140181e182e
18fc180d9160188c18cc18f6180718171837b170188c189c18ac1827183718471867c160186c189c1857186718771897d140189c18ac186c187c727018861896
18a618b618ec18fc180d824018bc18d618ec18b692e0102018bc18cc18d618e618f618071817082d18dc084d18c608cba2f01020181718271837084b1847085b
087b088b086b08ab08bb08cb089bb2b008ea08fa081b082b083b084b185718471867085b086bc27008ea08fc081b18571877188718971340182e18ed18fd180e
4360181e182e1866180b182b180e63501896181e186618fc187673b0081e083e183e184e1866187618861896d0e0018360188618a6d0e0085d087d9311405060
708090a018b618c618d618e618a6b0082d084d085d087da3a11810203018205060184018b018c018d018e018f01801089b08ab08bb082d083d089f08af08bf08
cf08df08ef08ff1800b351181018201830184018501860187008ca08da18d008fa080d081d080b083b082b18c0086b089b08ff1800c38008ba08ca08ea08fc08
0d08fa188718a7d370185c186c187c1887189718a718c73460181b182b183b185b18ed180e4490180b181b182b183b637393a3c35470183e1866180b33436373
6450183e33184e18560374a0081e083e184e18560111213141518401081e082e084e085e086ee0f0112141085d086d518171080e94b0086e8090b0c018211831
1841085d086d088fa4a0609018f018011811182118411881089f08bfb4e0186018701880089a08aa189008cc08dc18a008da08ca181118d01801c470088a089a
08ba08ca18a718b718c7f440183c184c185c187c257018ea18fa184b185b18dd18ed18fd35a0243418ea183b184b185bc3d3f304452114344408ae08be08ce08
de08ee08fe738393a3b3c3d3e3045501b308ee08fe031323334353083f081f8373080f082f086f6590185e186e187e1856a2d2e2031375c0183618461856186e
187e185e3141617108ed08fd85d0086ec1e1718191a1b1088fd108ed08fd080e95501891b11831e1088fa560189018a01811185118711881b580085a086a087a
189008cc08dc08ec1851c560088a089a08dc08ec18b718d7d560183c185c18b718c718d718f7064018ad18cd18dd18fd266018ba18ca18da18fa18ad18dd3690
2434546418da18ea18fa08cd08dd460134446474088e087e08ae089e08be08de08ce08fe086f087f08bd08cd5690f2081f23083f084f085f082f087f086f6611
18128292a2b2c2d2e2f218031323084f085f087f18a5180276111816182618361242225272184682a2185eb218ee9108ed180686c0181622123218ee0291c1d1
e1f1180696901814183118411881189118a118b1e102a6a01814084a087a189e08bc18431851186118711881b6d018181828083a082a084a085a086a087a089c
08ac08bc18e71808c65008ec18d7085a18e718f7d6701828182c184c183c18e718f718082770188a189a18aa18ca18ad18bd18cd37905484188a18aa18ba18ca
18dab408dd47b0087e8494a4b4c4d4187508bd08cd08dd5750089e18a5087f1875087e6750921812c218f1180277f0181222325262829218ae180318c518b518
c118d118e118f187b0181432188e189e18c518a118b118c118e518e102c740089c1838181808f92860185a186a187a189a188d18bd38a0185a187a188a189ab4
c4e4f415254890a4c4d418e418f405f418051875588018ce18f4180518031875189518a518b5a860188e189e18431853187318f5b8c0081a089c08ac08bc1843
18531863187308d908e908f9080ac87018381848185808c908d908f9080ad860181818281838182c1858180ce840181c182c184c180c0940189d18bd18cd188d
3990184a185a186a15254555089d08ad49111895189418a418b418c418d418e4f405180525355565088d089d188559a018341844185418641874188418a418ce
188518956990182418445618ae18ce1815183518b508db79705686b61815182518351845899018ae18be182518351845186518c518d518e5a9e0188e18e31873
186318d31883189318a318b318c318d518e518f51804b90108b918a3082908d908490859186308790889189308a918b318c318d3188308e9c9a0184818681878
188808690879089908a908c908d9d970181c184818581868188818fb180c2a70182a183a184a186a187d188d189d3a40182a08ad45184a4a40089d08ad75855a
012618341854186418741884189418a4c585088d089db595e5f56ad01626183418241844564608dbe508fb08ebf5067ae036465666768696a6b6c6d6e608eb08
fb8ac018321842b618bed6e618de07171845185518659a9018be08c818de18e208f818f218d518f31804aab0087c088c08b808c808e808f8082918c318e318f3
1804bae0086c087c088c189818a818b808090819082908390849085908690879ca401898083908691878da6018781888189818b818db18fb4b50181a08ad183a
182a755ba0181ae57585a5b5d518e918f9180a6b901608fb18d918b918c9d5e518e9067bf0081c082c366696c6d6f6072737188918a918b908fb8b7118221832
1842185218621872189218131833186b187b080c081c085c18de071737476777a7d79b710838085808680888089808b808c818721882189218a218b218c218d2
18e218f2181318231833186b085c18de0808abb0086c08780888087c08a808b818c808d818d808e8188bbb4018a818c8086c0809cb7018a818b818c8188b18cb
18db18ebeb40181c18db18eb18fb4c60181a183a185d187d18f9180a5c70184d185d186d18c918d918e9180a6c70181d184d1889189918a918b918d97ca02737
5767187918891899871859978ce0083c084c085cc71849185967778797a7b71869d79cd008180828083c084c085c08380868085818f81819e7f70808aca00818
0828084808580878088818d818e818f81809bc6018d818e81809188b189b18cb3d40189d185d186d187d7d70181d182d183d18591869187918998d80084c1829
__map__
81d281948193819681ba7bd90581918192819380c47eda07818f81908191819381b981ba81bbe50481d181d381d481d6ec0481b981bb81bc81bef80481bb81d281d381ba000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
